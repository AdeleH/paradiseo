.TH "eoEsChromInit" 3 "19 Oct 2006" "Version 0.9.4-cvs" "EO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eoEsChromInit \- Random Es-chromosome initializer (therefore derived from \fBeoInit\fP).  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <eoEsChromInit.h>\fP
.PP
Inherits \fBeoRealInitBounded< EOT >< EOT >\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef EOT::Fitness \fBFitT\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBeoEsChromInit\fP (\fBeoRealVectorBounds\fP &_bounds, double _sigma=0.3, bool _to_scale=false)"
.br
.RI "\fIConstructor. \fP"
.ti -1c
.RI "\fBeoEsChromInit\fP (\fBeoRealVectorBounds\fP &_bounds, std::vector< double > _vecSigma)"
.br
.RI "\fIConstructor. \fP"
.ti -1c
.RI "void \fBoperator()\fP (\fBEOT\fP &_eo)"
.br
.RI "\fIsimply passes the argument to the uniform method of the bounds \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBcreate_self_adapt\fP (\fBeoReal\fP< FitT > &)"
.br
.RI "\fICreate intializer. \fP"
.ti -1c
.RI "void \fBcreate_self_adapt\fP (\fBeoEsSimple\fP< FitT > &result)"
.br
.RI "\fICreate intializer. \fP"
.ti -1c
.RI "void \fBcreate_self_adapt\fP (\fBeoEsStdev\fP< FitT > &result)"
.br
.RI "\fICreate intializer. \fP"
.ti -1c
.RI "void \fBcreate_self_adapt\fP (\fBeoEsFull\fP< FitT > &result)"
.br
.RI "\fICreate intializer. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBuniqueSigma\fP"
.br
.RI "\fIInitial value in case of a unique sigma. \fP"
.ti -1c
.RI "std::vector< double > \fBvecSigma\fP"
.br
.RI "\fIInitial values in case of a vector of sigmas. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class EOT> class eoEsChromInit< EOT >"
Random Es-chromosome initializer (therefore derived from \fBeoInit\fP). 

This class can initialize four types of real-valued genotypes thanks to tempate specialization of private method create:
.PP
.IP "\(bu" 2
\fBeoReal\fP just an eoVector<double>
.IP "\(bu" 2
\fBeoEsSimple\fP + one self-adapting single sigma for all variables
.IP "\(bu" 2
\fBeoEsStdev\fP a whole std::vector of self-adapting sigmas
.IP "\(bu" 2
\fBeoEsFull\fP a full self-adapting correlation matrix
.PP
.PP
\fBSee also:\fP
.RS 4
\fBeoReal\fP \fBeoEsSimple\fP \fBeoEsStdev\fP \fBeoEsFull\fP \fBeoInit\fP 
.RE
.PP

.PP
Definition at line 55 of file eoEsChromInit.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class EOT> \fBeoEsChromInit\fP< \fBEOT\fP >::\fBeoEsChromInit\fP (\fBeoRealVectorBounds\fP & _bounds, double _sigma = \fC0.3\fP, bool _to_scale = \fCfalse\fP)\fC [inline]\fP"
.PP
Constructor. 
.PP
\fBParameters:\fP
.RS 4
\fI_bounds\fP bounds for uniform initialization 
.br
\fI_sigma\fP initial value for the stddev 
.br
\fI_to_scale\fP wether sigma should be multiplied by the range of each variable added December 2004 - MS (together with the whole comment :-) 
.RE
.PP

.PP
Definition at line 71 of file eoEsChromInit.h.
.PP
References eoRealBaseVectorBounds::range(), eoRealInitBounded< EOT >::theBounds(), eoEsChromInit< EOT >::uniqueSigma, and eoEsChromInit< EOT >::vecSigma.
.SS "template<class EOT> \fBeoEsChromInit\fP< \fBEOT\fP >::\fBeoEsChromInit\fP (\fBeoRealVectorBounds\fP & _bounds, std::vector< double > _vecSigma)\fC [inline]\fP"
.PP
Constructor. 
.PP
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.PP
Specify individual initial sigmas for each variable.
.PP
\fBParameters:\fP
.RS 4
\fI_bounds\fP bounds for uniform initialization 
.br
\fI_sigma\fP initial value for the stddev 
.RE
.PP

.PP
Definition at line 109 of file eoEsChromInit.h.
.PP
References eoEsChromInit< EOT >::uniqueSigma, and eoEsChromInit< EOT >::vecSigma.
.SH "Member Function Documentation"
.PP 
.SS "template<class EOT> void \fBeoEsChromInit\fP< \fBEOT\fP >::create_self_adapt (\fBeoReal\fP< FitT > &)\fC [inline, private]\fP"
.PP
Create intializer. 
.PP
No adaptive mutation at all 
.PP
Definition at line 128 of file eoEsChromInit.h.
.PP
Referenced by eoEsChromInit< EOT >::operator()().
.SS "template<class EOT> void \fBeoEsChromInit\fP< \fBEOT\fP >::create_self_adapt (\fBeoEsSimple\fP< FitT > & result)\fC [inline, private]\fP"
.PP
Create intializer. 
.PP
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.PP
Adaptive mutation through a unique sigma 
.PP
Definition at line 139 of file eoEsChromInit.h.
.PP
References eoEsSimple< Fit >::stdev.
.SS "template<class EOT> void \fBeoEsChromInit\fP< \fBEOT\fP >::create_self_adapt (\fBeoEsStdev\fP< FitT > & result)\fC [inline, private]\fP"
.PP
Create intializer. 
.PP
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.PP
Adaptive mutation through a std::vector of sigmas
.PP
\fBTodo\fP
.RS 4
Should we scale sigmas to the corresponding object variable range? 
.RE
.PP

.PP
Definition at line 155 of file eoEsChromInit.h.
.PP
References eoEsStdev< Fit >::stdevs.
.SS "template<class EOT> void \fBeoEsChromInit\fP< \fBEOT\fP >::create_self_adapt (\fBeoEsFull\fP< FitT > & result)\fC [inline, private]\fP"
.PP
Create intializer. 
.PP
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.PP
Adaptive mutation through a whole correlation matrix 
.PP
Definition at line 169 of file eoEsChromInit.h.
.PP
References eoEsFull< Fit >::correlations, eoEsFull< Fit >::stdevs, and eoRng::uniform().

.SH "Author"
.PP 
Generated automatically by Doxygen for EO from the source code.
