.TH "eoFunctorBase" 3 "19 Oct 2006" "Version 0.9.4-cvs" "EO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eoFunctorBase \- Base class for functors to get a nice hierarchy diagram.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <eoFunctor.h>\fP
.PP
Inherited by \fBeoBF< A1, A2, R >\fP, \fBeoBF< AtomType &, AtomType &, bool >\fP, \fBeoBF< AtomType &, const AtomType &, bool >\fP, \fBeoBF< Chrom &, Chrom &, bool >\fP, \fBeoBF< const Dummy &, const Dummy &, double >\fP, \fBeoBF< const eoPop< Chrom > &, eoPop< Chrom > &, void >\fP, \fBeoBF< const eoPop< EOT > &, eoPop< EOT > &, void >\fP, \fBeoBF< const eoPop< eoVector< FitT, double > > &, eoPop< eoVector< FitT, double > > &, void >\fP, \fBeoBF< const EOT &, const EOT &, double >\fP, \fBeoBF< double &, const double &, bool >\fP, \fBeoBF< eoDistribution< EOT > &, eoPop< EOT > &, void >\fP, \fBeoBF< eoParseTree< FType, Node > &, eoParseTree< FType, Node > &, bool >\fP, \fBeoBF< eoPop< EOT > &, eoPop< EOT > &, void >\fP, \fBeoBF< eoPop< EOT > &, unsigned, void >\fP, \fBeoBF< eoPop< EoType > &, eoPop< EoType > &, void >\fP, \fBeoBF< eoPop< PyEO > &, unsigned, void >\fP, \fBeoBF< EOT &, const EOT &, bool >\fP, \fBeoBF< EOT &, EOT &, bool >\fP, \fBeoBF< EOType &, const EOType &, bool >\fP, \fBeoBF< EoType &, const EoType &, bool >\fP, \fBeoBF< EoType &, EoType &, bool >\fP, \fBeoBF< EOType &, EOType &, bool >\fP, \fBeoBF< eoVirus< FitT > &, const eoVirus< FitT > &, bool >\fP, \fBeoBF< ExternalEO &, const ExternalEO &, bool >\fP, \fBeoBF< ExternalEO &, ExternalEO &, bool >\fP, \fBeoBF< GenotypeT &, GenotypeT &, bool >\fP, \fBeoBF< PyEO &, const PyEO &, bool >\fP, \fBeoBF< PyEO &, PyEO &, bool >\fP, \fBeoBF< unsigned, Atom &, bool >\fP, \fBeoBF< unsigned, AtomType &, bool >\fP, \fBeoF< R >\fP, \fBeoF< AtomType >\fP, \fBeoF< bool >\fP, \fBeoF< eoMonitor & >\fP, \fBeoF< EOT >\fP, \fBeoF< int >\fP, \fBeoF< T >\fP, \fBeoF< void >\fP, \fBeoUF< A1, R >\fP, \fBeoUF< AtomType &, bool >\fP, \fBeoUF< AtomType &, void >\fP, \fBeoUF< bool &, bool >\fP, \fBeoUF< bool &, void >\fP, \fBeoUF< Chrom &, bool >\fP, \fBeoUF< Chrom &, void >\fP, \fBeoUF< const eoPop< EOT > &, bool >\fP, \fBeoUF< const eoPop< EOT > &, const EOT & >\fP, \fBeoUF< const eoPop< EOT > &, void >\fP, \fBeoUF< const eoPop< EoType > &, void >\fP, \fBeoUF< const eoPop< PyEO > &, const PyEO & >\fP, \fBeoUF< const eoPop< PyEO > &, void >\fP, \fBeoUF< const std::vector< const EOT * > &, void >\fP, \fBeoUF< const std::vector< const EoType * > &, void >\fP, \fBeoUF< const std::vector< const PyEO * > &, void >\fP, \fBeoUF< eoDistribution< EOT > &, void >\fP, \fBeoUF< eoDouble &, bool >\fP, \fBeoUF< eoDouble &, void >\fP, \fBeoUF< eoParseTree< FitnessType, Node > &, void >\fP, \fBeoUF< eoParseTree< FType, Node > &, bool >\fP, \fBeoUF< eoParseTree< FType, Node > &, void >\fP, \fBeoUF< eoPop< EOT > &, void >\fP, \fBeoUF< eoPopulator< EOT > &, void >\fP, \fBeoUF< eoPopulator< PyEO > &, void >\fP, \fBeoUF< EOT &, bool >\fP, \fBeoUF< EOT &, unsigned int >\fP, \fBeoUF< EOT &, void >\fP, \fBeoUF< EoType &, bool >\fP, \fBeoUF< EOType &, bool >\fP, \fBeoUF< EoType &, void >\fP, \fBeoUF< eoVector< FitT, double > &, void >\fP, \fBeoUF< eoVirus< FitT > &, bool >\fP, \fBeoUF< eoVirus< FitT > &, void >\fP, \fBeoUF< ExternalEO &, bool >\fP, \fBeoUF< ExternalEO &, void >\fP, \fBeoUF< GenotypeT &, bool >\fP, \fBeoUF< GenotypeT &, void >\fP, \fBeoUF< int &, void >\fP, \fBeoUF< PyEO &, bool >\fP, and \fBeoUF< T &, void >\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~eoFunctorBase\fP ()"
.br
.RI "\fIvirtual dtor here so there is no need to define it in derived classes \fP"
.in -1c
.SH "Detailed Description"
.PP 
Base class for functors to get a nice hierarchy diagram. 

That's actually quite an understatement as it does quite a bit more than just that. By having all functors derive from the same base class, we can do some memory management that would otherwise be very hard.
.PP
The memory management base class is called \fBeoFunctorStore\fP, and it supports a member add() to add a pointer to a functor. When the functorStore is destroyed, it will delete all those pointers. So beware: do not delete the functorStore before you are done with anything that might have been allocated.
.PP
\fBSee also:\fP
.RS 4
\fBeoFunctorStore\fP 
.RE
.PP

.PP
Definition at line 46 of file eoFunctor.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for EO from the source code.
