.TH "eoRealVectorNoBounds" 3 "19 Oct 2006" "Version 0.9.4-cvs" "EO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eoRealVectorNoBounds \- the dummy unbounded \fBeoRealVectorBounds\fP: usefull if you don't need bounds! everything is inlined.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <eoRealVectorBounds.h>\fP
.PP
Inherits \fBeoRealVectorBounds\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBeoRealVectorNoBounds\fP (unsigned _dim)"
.br
.RI "\fICtor: nothing to do, but beware of dimension: call base class ctor. \fP"
.ti -1c
.RI "virtual bool \fBisBounded\fP (unsigned)"
.br
.RI "\fItest: is i_th component bounded \fP"
.ti -1c
.RI "virtual bool \fBisBounded\fP (void)"
.br
.RI "\fItest: bounded iff all are bounded \fP"
.ti -1c
.RI "virtual bool \fBhasNoBoundAtAll\fP (unsigned)"
.br
.RI "\fISelf-test: true iff i_th component has no bounds at all. \fP"
.ti -1c
.RI "virtual bool \fBhasNoBoundAtAll\fP (void)"
.br
.RI "\fISelf-test: true iff all components have no bound at all. \fP"
.ti -1c
.RI "virtual bool \fBisMinBounded\fP (unsigned)"
.br
.ti -1c
.RI "virtual bool \fBisMaxBounded\fP (unsigned)"
.br
.ti -1c
.RI "virtual void \fBfoldsInBounds\fP (unsigned, double &)"
.br
.RI "\fIFolds a real value back into the bounds - i_th component. \fP"
.ti -1c
.RI "virtual void \fBfoldsInBounds\fP (std::vector< double > &)"
.br
.RI "\fIFolds all variables of a std::vector of real values into the bounds. \fP"
.ti -1c
.RI "virtual void \fBtruncate\fP (unsigned, double &)"
.br
.RI "\fITruncates a real value to the bounds - i_th component. \fP"
.ti -1c
.RI "virtual void \fBtruncate\fP (std::vector< double > &)"
.br
.RI "\fItruncates all variables of a std::vector of real values to the bounds \fP"
.ti -1c
.RI "virtual bool \fBisInBounds\fP (unsigned, double)"
.br
.RI "\fItest: is i_th component within the bounds? \fP"
.ti -1c
.RI "virtual bool \fBisInBounds\fP (std::vector< double >)"
.br
.RI "\fItest: are ALL components within the bounds? \fP"
.ti -1c
.RI "virtual double \fBminimum\fP (unsigned)"
.br
.RI "\fIAccessors: will raise an std::exception if these do not exist. \fP"
.ti -1c
.RI "virtual double \fBmaximum\fP (unsigned)"
.br
.ti -1c
.RI "virtual double \fBrange\fP (unsigned)"
.br
.ti -1c
.RI "virtual double \fBaverageRange\fP ()"
.br
.RI "\fIComputes the average range An std::exception will be raised if one of the component is unbounded. \fP"
.ti -1c
.RI "virtual double \fBuniform\fP (unsigned, \fBeoRng\fP &_rng=eo::rng)"
.br
.RI "\fIGenerates a random number in i_th range An std::exception will be raised if one of the component is unbounded. \fP"
.ti -1c
.RI "void \fBuniform\fP (std::vector< double > &, \fBeoRng\fP &_rng=eo::rng)"
.br
.RI "\fIfills a std::vector with uniformly chosen variables in bounds An std::exception will be raised if one of the component is unbounded \fP"
.in -1c
.SH "Detailed Description"
.PP 
the dummy unbounded \fBeoRealVectorBounds\fP: usefull if you don't need bounds! everything is inlined. 

Warning: we do need this class, and not only a std::vector<eoRealNoBounds *> 
.PP
Definition at line 352 of file eoRealVectorBounds.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for EO from the source code.
