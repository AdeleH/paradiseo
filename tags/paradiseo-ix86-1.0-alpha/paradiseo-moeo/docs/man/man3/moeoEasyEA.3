.TH "moeoEasyEA" 3 "17 Apr 2007" "Version 1.0.alpha" "ParadisEO-MOEO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
moeoEasyEA \- An easy class to design multi-objective evolutionary algorithms.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <moeoEasyEA.h>\fP
.PP
Inherits \fBmoeoEA< MOEOT >< MOEOT >\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmoeoEasyEA\fP (\fBeoContinue\fP< MOEOT > &_continuator, \fBeoEvalFunc\fP< MOEOT > &_eval, \fBeoBreed\fP< MOEOT > &_breed, \fBeoReplacement\fP< MOEOT > &_replace, \fBmoeoFitnessAssignment\fP< MOEOT > &_fitnessEval, \fBmoeoDiversityAssignment\fP< MOEOT > &_diversityEval, bool _evalFitAndDivBeforeSelection=false)"
.br
.RI "\fICtor. \fP"
.ti -1c
.RI "virtual void \fBoperator()\fP (\fBeoPop\fP< MOEOT > &_pop)"
.br
.RI "\fIApplies a few generation of evolution to the population _pop. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBeoContinue\fP< MOEOT > & \fBcontinuator\fP"
.br
.RI "\fIthe stopping criteria \fP"
.ti -1c
.RI "\fBeoEvalFunc\fP< MOEOT > & \fBeval\fP"
.br
.RI "\fIthe evaluation functions \fP"
.ti -1c
.RI "\fBeoPopLoopEval\fP< MOEOT > \fBloopEval\fP"
.br
.RI "\fIto evaluate the whole population \fP"
.ti -1c
.RI "\fBeoPopEvalFunc\fP< MOEOT > & \fBpopEval\fP"
.br
.RI "\fIto evaluate the whole population \fP"
.ti -1c
.RI "\fBeoBreed\fP< MOEOT > & \fBbreed\fP"
.br
.RI "\fIthe breeder \fP"
.ti -1c
.RI "\fBeoReplacement\fP< MOEOT > & \fBreplace\fP"
.br
.RI "\fIthe replacment strategy \fP"
.ti -1c
.RI "\fBmoeoFitnessAssignment\fP< MOEOT > & \fBfitnessEval\fP"
.br
.RI "\fIthe fitness assignment strategy \fP"
.ti -1c
.RI "\fBmoeoDiversityAssignment\fP< MOEOT > & \fBdiversityEval\fP"
.br
.RI "\fIthe diversity assignment strategy \fP"
.ti -1c
.RI "bool \fBevalFitAndDivBeforeSelection\fP"
.br
.RI "\fIif this parameter is set to 'true', the fitness and the diversity of the whole population will be re-evaluated before the selection process \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class MOEOT> class moeoEasyEA< MOEOT >"
An easy class to design multi-objective evolutionary algorithms. 
.PP
Definition at line 31 of file moeoEasyEA.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class MOEOT> \fBmoeoEasyEA\fP< MOEOT >::\fBmoeoEasyEA\fP (\fBeoContinue\fP< MOEOT > & _continuator, \fBeoEvalFunc\fP< MOEOT > & _eval, \fBeoBreed\fP< MOEOT > & _breed, \fBeoReplacement\fP< MOEOT > & _replace, \fBmoeoFitnessAssignment\fP< MOEOT > & _fitnessEval, \fBmoeoDiversityAssignment\fP< MOEOT > & _diversityEval, bool _evalFitAndDivBeforeSelection = \fCfalse\fP)\fC [inline]\fP"
.PP
Ctor. 
.PP
\fBParameters:\fP
.RS 4
\fI_continuator\fP the stopping criteria 
.br
\fI_eval\fP the evaluation functions 
.br
\fI_breed\fP the breeder 
.br
\fI_replace\fP the replacment strategy 
.br
\fI_fitnessEval\fP the fitness evaluation scheme 
.br
\fI_diversityEval\fP the diversity evaluation scheme 
.br
\fI_evalFitAndDivBeforeSelection\fP put this parameter to 'true' if you want to re-evalue the fitness and the diversity of the population before the selection process 
.RE
.PP

.PP
Definition at line 45 of file moeoEasyEA.h.
.SH "Member Function Documentation"
.PP 
.SS "template<class MOEOT> virtual void \fBmoeoEasyEA\fP< MOEOT >::operator() (\fBeoPop\fP< MOEOT > & _pop)\fC [inline, virtual]\fP"
.PP
Applies a few generation of evolution to the population _pop. 
.PP
\fBParameters:\fP
.RS 4
\fI_pop\fP the population 
.RE
.PP

.PP
Implements \fBeoUF< eoPop< MOEOT > &, void >\fP.
.PP
Definition at line 57 of file moeoEasyEA.h.
.PP
References moeoEasyEA< MOEOT >::breed, moeoEasyEA< MOEOT >::continuator, moeoEasyEA< MOEOT >::diversityEval, moeoEasyEA< MOEOT >::evalFitAndDivBeforeSelection, moeoEasyEA< MOEOT >::fitnessEval, moeoEasyEA< MOEOT >::popEval, and moeoEasyEA< MOEOT >::replace.

.SH "Author"
.PP 
Generated automatically by Doxygen for ParadisEO-MOEO from the source code.
