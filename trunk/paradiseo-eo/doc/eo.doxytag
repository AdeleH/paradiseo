<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>Welcome to Evolving Objects</title>
    <filename>main</filename>
    <docanchor file="main">intro</docanchor>
    <docanchor file="main">tutorial</docanchor>
    <docanchor file="main">install</docanchor>
    <docanchor file="main">design</docanchor>
  </compound>
  <compound kind="class">
    <name>eo1PtBitCrossover</name>
    <filename>classeo1_pt_bit_crossover.html</filename>
  </compound>
  <compound kind="class">
    <name>eoAged</name>
    <filename>classeo_aged.html</filename>
    <templarg>Object</templarg>
    <member kind="function">
      <type></type>
      <name>eoAged</name>
      <anchor>a0</anchor>
      <arglist>(const Object &amp;_o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoAged</name>
      <anchor>a1</anchor>
      <arglist>(const eoAged &amp;_a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoAged</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>Age</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const eoAged &amp;</type>
      <name>operator++</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>z9_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>z9_1</anchor>
      <arglist>(istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>z9_2</anchor>
      <arglist>(ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>eoAged</name>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>age</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoAlgo</name>
    <filename>classeo_algo.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; eoPop&lt; EOT &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoArithmeticCrossover</name>
    <filename>classeo_arithmetic_crossover.html</filename>
  </compound>
  <compound kind="class">
    <name>eoAssembledFitnessAverageStat</name>
    <filename>classeo_assembled_fitness_average_stat.html</filename>
    <templarg>EOT</templarg>
    <base>eoStat&lt; EOT, double &gt;</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoAssembledFitnessAverageStat</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _whichTerm=0, std::string _description=&quot;Average Fitness&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>whichFitnessTerm</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoAssembledFitnessBestStat</name>
    <filename>classeo_assembled_fitness_best_stat.html</filename>
    <templarg>EOT</templarg>
    <base>eoStat&lt; EOT, double &gt;</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoAssembledFitnessBestStat</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _whichTerm=0, std::string _description=&quot;Best Fitness&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>whichFitnessTerm</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoAtomExchange</name>
    <filename>classeo_atom_exchange.html</filename>
    <templarg>Atom</templarg>
    <base>eoBF&lt; unsigned, Atom &amp;, bool &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>randomize</name>
      <anchor>a0</anchor>
      <arglist>(unsigned int, unsigned int)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoAverageStat</name>
    <filename>classeo_average_stat.html</filename>
    <templarg>EOT</templarg>
    <base>eoStat&lt; EOT, EOT::Fitness &gt;</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoAverageStat</name>
      <anchor>a0</anchor>
      <arglist>(std::string _description=&quot;Average Fitness&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoAverageStat</name>
      <anchor>a1</anchor>
      <arglist>(double _value, std::string _desc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>Fitness</type>
      <name>sumFitness</name>
      <anchor>e0</anchor>
      <arglist>(double _sum, const EOT &amp;_eot)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doit</name>
      <anchor>d0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop, eoParetoFitness&lt; T &gt;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doit</name>
      <anchor>d1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop, T)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBestFitnessStat</name>
    <filename>classeo_best_fitness_stat.html</filename>
    <templarg>EOT</templarg>
    <base>eoStat&lt; EOT, EOT::Fitness &gt;</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoBestFitnessStat</name>
      <anchor>a0</anchor>
      <arglist>(std::string _description=&quot;Best &quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doit</name>
      <anchor>d0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop, eoParetoFitness&lt; T &gt;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doit</name>
      <anchor>d1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop, T)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBestSelect</name>
    <filename>classeo_best_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBF</name>
    <filename>classeo_b_f.html</filename>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>R</templarg>
    <base>eoFunctorBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoBF</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual R</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(A1, A2)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>eoFunctorBase::binary_function_tag</type>
      <name>functor_category</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BiasedNodeSelector</name>
    <filename>class_biased_node_selector.html</filename>
    <base>NodeSelector</base>
    <member kind="function">
      <type></type>
      <name>BiasedNodeSelector</name>
      <anchor>a1</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>NodeSelection</type>
      <name>select_node</name>
      <anchor>a2</anchor>
      <arglist>(Sym sym) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>nRounds</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBinaryFunctorCounter</name>
    <filename>classeo_binary_functor_counter.html</filename>
    <templarg>BinaryFunctor</templarg>
    <base>eoValueParam&lt; unsigned long &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoBinaryFunctorCounter</name>
      <anchor>a0</anchor>
      <arglist>(BinaryFunctor &amp;_func, std::string _name=&quot;proc_counter&quot;)</arglist>
    </member>
    <member kind="function">
      <type>BinaryFunctor::result_type</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(typename BinaryFunctor::first_argument_type _arg1, typename BinaryFunctor::second_argument_type _arg2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BinaryFunctor &amp;</type>
      <name>func</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBinCloneOp</name>
    <filename>classeo_bin_clone_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoBinCloneOp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EOT &amp;, const EOT &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBinGenOp</name>
    <filename>classeo_bin_gen_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoGenOp</base>
    <member kind="function">
      <type></type>
      <name>eoBinGenOp</name>
      <anchor>a0</anchor>
      <arglist>(eoBinOp&lt; EOT &gt; &amp;_op)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_production</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBinOp&lt; EOT &gt; &amp;</type>
      <name>op</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBinOp</name>
    <filename>classeo_bin_op.html</filename>
    <templarg>EOType</templarg>
    <base>eoOp</base>
    <base>eoBF&lt; EOType &amp;, const EOType &amp;, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoBinOp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBit</name>
    <filename>classeo_bit.html</filename>
    <templarg>FitT</templarg>
    <base>eoVector&lt; FitT, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoBit</name>
      <anchor>a0</anchor>
      <arglist>(unsigned size=0, bool value=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBitBitFlip</name>
    <filename>classeo_bit_bit_flip.html</filename>
  </compound>
  <compound kind="class">
    <name>eoBitGxOver</name>
    <filename>classeo_bit_gx_over.html</filename>
    <templarg>Chrom</templarg>
    <base>eoQuadOp&lt; Chrom &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoBitGxOver</name>
      <anchor>a0</anchor>
      <arglist>(const unsigned _gene_size, const unsigned _num_points=2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(Chrom &amp;chrom1, Chrom &amp;chrom2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>gene_size</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>num_points</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBitInversion</name>
    <filename>classeo_bit_inversion.html</filename>
    <templarg>Chrom</templarg>
    <base>eoMonOp&lt; Chrom &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(Chrom &amp;chrom)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBitMutation</name>
    <filename>classeo_bit_mutation.html</filename>
    <templarg>Chrom</templarg>
    <base>eoMonOp&lt; Chrom &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoBitMutation</name>
      <anchor>a0</anchor>
      <arglist>(const double &amp;_rate=0.01, bool _normalize=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(Chrom &amp;chrom)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>normalize</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBitNext</name>
    <filename>classeo_bit_next.html</filename>
    <templarg>Chrom</templarg>
    <base>eoMonOp&lt; Chrom &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(Chrom &amp;chrom)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBitOpFactory</name>
    <filename>classeo_bit_op_factory.html</filename>
    <templarg>EOT</templarg>
    <base>eoFactory&lt; EOT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual eoOp&lt; EOT &gt; *</type>
      <name>make</name>
      <anchor>a0</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoBitOpFactory</name>
      <anchor>z23_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoBitOpFactory</name>
      <anchor>z23_1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBitPrev</name>
    <filename>classeo_bit_prev.html</filename>
    <templarg>Chrom</templarg>
    <base>eoMonOp&lt; Chrom &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(Chrom &amp;chrom)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boolean_generator</name>
    <filename>classboolean__generator.html</filename>
    <member kind="function">
      <type></type>
      <name>boolean_generator</name>
      <anchor>a0</anchor>
      <arglist>(float _bias=0.5, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>bias</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>gen</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBooleanGenerator</name>
    <filename>classeo_boolean_generator.html</filename>
    <base>eoRndGenerator&lt; bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoBooleanGenerator</name>
      <anchor>a0</anchor>
      <arglist>(float _bias=0.5, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>bias</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>gen</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBooleanInit</name>
    <filename>classeo_boolean_init.html</filename>
    <base>eoInit&lt; bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoBooleanInit</name>
      <anchor>a0</anchor>
      <arglist>(float _bias=0.5, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(bool &amp;_b)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>bias</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>gen</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBoolFlip</name>
    <filename>classeo_bool_flip.html</filename>
    <base>eoMonOp&lt; bool &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(bool &amp;_b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBranchMutation</name>
    <filename>classeo_branch_mutation.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoMonOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoBranchMutation</name>
      <anchor>a0</anchor>
      <arglist>(eoInit&lt; EoType &gt; &amp;_init, unsigned _max_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoBranchMutation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_length</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInit&lt; EoType &gt; &amp;</type>
      <name>initializer</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoBreed</name>
    <filename>classeo_breed.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; const eoPop&lt; EOT &gt; &amp;, eoPop&lt; EOT &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoCellularEasyEA</name>
    <filename>classeo_cellular_easy_e_a.html</filename>
    <templarg>EOT</templarg>
    <base>eoAlgo</base>
    <member kind="function">
      <type></type>
      <name>eoCellularEasyEA</name>
      <anchor>a0</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_cont, eoEvalFunc&lt; EOT &gt; &amp;_eval, eoSelectOne&lt; EOT &gt; &amp;_sel_neigh, eoBinOp&lt; EOT &gt; &amp;_cross, eoMonOp&lt; EOT &gt; &amp;_mut, eoSelectOne&lt; EOT &gt; &amp;_sel_repl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoCellularEasyEA</name>
      <anchor>a1</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_cont, eoEvalFunc&lt; EOT &gt; &amp;_eval, eoSelectOne&lt; EOT &gt; &amp;_sel_neigh, eoQuadOp&lt; EOT &gt; &amp;_cross, eoMonOp&lt; EOT &gt; &amp;_mut, eoSelectOne&lt; EOT &gt; &amp;_sel_child, eoSelectOne&lt; EOT &gt; &amp;_sel_repl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;pop)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual eoPop&lt; EOT &gt;</type>
      <name>neighbours</name>
      <anchor>b0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;pop, int rank)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoContinue&lt; EOT &gt; &amp;</type>
      <name>cont</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>eval</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPopLoopEval&lt; EOT &gt;</type>
      <name>popEval</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>sel_neigh</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBF&lt; EOT &amp;, EOT &amp;, bool &gt; &amp;</type>
      <name>cross</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonOp&lt; EOT &gt; &amp;</type>
      <name>mut</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>sel_child</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>sel_repl</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCheckPoint</name>
    <filename>classeo_check_point.html</filename>
    <templarg>EOT</templarg>
    <base>eoContinue</base>
    <member kind="function">
      <type></type>
      <name>eoCheckPoint</name>
      <anchor>a0</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_cont)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_cont)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a3</anchor>
      <arglist>(eoSortedStatBase&lt; EOT &gt; &amp;_stat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a4</anchor>
      <arglist>(eoStatBase&lt; EOT &gt; &amp;_stat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a5</anchor>
      <arglist>(eoMonitor &amp;_mon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a6</anchor>
      <arglist>(eoUpdater &amp;_upd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>allClassNames</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoContinue&lt; EOT &gt; * &gt;</type>
      <name>continuators</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoSortedStatBase&lt; EOT &gt; * &gt;</type>
      <name>sorted</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoStatBase&lt; EOT &gt; * &gt;</type>
      <name>stats</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoMonitor * &gt;</type>
      <name>monitors</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoUpdater * &gt;</type>
      <name>updaters</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCMABreed</name>
    <filename>classeo_c_m_a_breed.html</filename>
    <templarg>FitT</templarg>
    <base>eoBreed&lt; eoVector&lt; FitT, double &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoCMABreed</name>
      <anchor>a0</anchor>
      <arglist>(eo::CMAState &amp;state_, unsigned lambda_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;parents, eoPop&lt; EOT &gt; &amp;offspring)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>eoVector&lt; FitT, double &gt;</type>
      <name>EOT</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eo::CMAState &amp;</type>
      <name>state</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>lambda</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCMAInit</name>
    <filename>classeo_c_m_a_init.html</filename>
    <templarg>FitT</templarg>
    <base>eoInit&lt; eoVector&lt; FitT, double &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoCMAInit</name>
      <anchor>a0</anchor>
      <arglist>(const eo::CMAState &amp;state_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;v)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>eoVector&lt; FitT, double &gt;</type>
      <name>EOT</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const eo::CMAState &amp;</type>
      <name>state</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCollapseSubtreeMutation</name>
    <filename>classeo_collapse_subtree_mutation.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoMonOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoCollapseSubtreeMutation</name>
      <anchor>a0</anchor>
      <arglist>(eoInit&lt; EoType &gt; &amp;_init, unsigned _max_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoCollapseSubtreeMutation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_length</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInit&lt; EoType &gt; &amp;</type>
      <name>initializer</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCombinedContinue</name>
    <filename>classeo_combined_continue.html</filename>
    <templarg>EOT</templarg>
    <base>eoContinue</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>FitnessType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoCombinedContinue</name>
      <anchor>a0</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_cont)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoCombinedContinue</name>
      <anchor>a1</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_cont1, eoContinue&lt; EOT &gt; &amp;_cont2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_cont)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLast</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a4</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoContinue&lt; EOT &gt; * &gt;</type>
      <name>continuators</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCombinedInit</name>
    <filename>classeo_combined_init.html</filename>
    <templarg>EOT</templarg>
    <base>eoInit</base>
    <member kind="function">
      <type></type>
      <name>eoCombinedInit</name>
      <anchor>a0</anchor>
      <arglist>(eoInit&lt; EOT &gt; &amp;_init, double _rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a1</anchor>
      <arglist>(eoInit&lt; EOT &gt; &amp;_init, double _rate, bool _verbose=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;_os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoInit&lt; EOT &gt; * &gt;</type>
      <name>initializers</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>rates</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCommaReplacement</name>
    <filename>classeo_comma_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoMergeReduce</base>
    <member kind="variable" protection="private">
      <type>eoNoElitism&lt; EOT &gt;</type>
      <name>no_elite</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoTruncate&lt; EOT &gt;</type>
      <name>truncate</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoContinue</name>
    <filename>classeo_continue.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; const eoPop&lt; EOT &gt; &amp;, bool &gt;</base>
    <base>eoPersistent</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a1</anchor>
      <arglist>(std::istream &amp;__is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;__os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCountedDynUpdate</name>
    <filename>classeo_counted_dyn_update.html</filename>
    <base>eoDynUpdater</base>
    <member kind="function">
      <type></type>
      <name>eoCountedDynUpdate</name>
      <anchor>a0</anchor>
      <arglist>(eoUpdatable &amp;_toUpdate, unsigned _interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const unsigned</type>
      <name>interval</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>counter</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCountedStateSaver</name>
    <filename>classeo_counted_state_saver.html</filename>
    <base>eoUpdater</base>
    <member kind="function">
      <type></type>
      <name>eoCountedStateSaver</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _interval, const eoState &amp;_state, std::string _prefix, bool _saveOnLastCall, std::string _extension=&quot;sav&quot;, unsigned _counter=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoCountedStateSaver</name>
      <anchor>a1</anchor>
      <arglist>(unsigned _interval, const eoState &amp;_state, std::string _prefix=&quot;state&quot;, std::string _extension=&quot;sav&quot;, unsigned _counter=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lastCall</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doItNow</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const eoState &amp;</type>
      <name>state</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const unsigned</type>
      <name>interval</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>counter</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>saveOnLastCall</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>prefix</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>extension</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Cov</name>
    <filename>class_cov.html</filename>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_meana</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_meanb</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_cov</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>n</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>meana</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>meanb</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>sumcov</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoCtrlCContinue</name>
    <filename>classeo_ctrl_c_continue.html</filename>
    <templarg>EOT</templarg>
    <base>eoContinue</base>
    <member kind="function">
      <type></type>
      <name>eoCtrlCContinue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_vEO)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDetBitFlip</name>
    <filename>classeo_det_bit_flip.html</filename>
    <templarg>Chrom</templarg>
    <base>eoMonOp&lt; Chrom &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoDetBitFlip</name>
      <anchor>a0</anchor>
      <arglist>(const unsigned &amp;_num_bit=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(Chrom &amp;chrom)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>num_bit</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDeterministicSaDReplacement</name>
    <filename>classeo_deterministic_sa_d_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoReplacement</base>
    <member kind="function">
      <type></type>
      <name>eoDeterministicSaDReplacement</name>
      <anchor>a0</anchor>
      <arglist>(eoReduce&lt; EOT &gt; &amp;_reduceGlobal, double _surviveParents, double _dieParents=0, double _surviveOffspring=0, double _dieOffspring=0, bool _interpret_as_rate=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoDeterministicSaDReplacement</name>
      <anchor>a1</anchor>
      <arglist>(double _surviveParents, double _dieParents=0, double _surviveOffspring=0, double _dieOffspring=0, bool _interpret_as_rate=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoReduce&lt; EOT &gt; &amp;</type>
      <name>reduceGlobal</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoDeterministicSurviveAndDie&lt; EOT &gt;</type>
      <name>sAdParents</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoDeterministicSurviveAndDie&lt; EOT &gt;</type>
      <name>sAdOffspring</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPlus&lt; EOT &gt;</type>
      <name>plus</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoTruncate&lt; EOT &gt;</type>
      <name>truncate</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDeterministicSurviveAndDie</name>
    <filename>classeo_deterministic_survive_and_die.html</filename>
    <templarg>EOT</templarg>
    <base>eoSurviveAndDie</base>
    <member kind="function">
      <type></type>
      <name>eoDeterministicSurviveAndDie</name>
      <anchor>a0</anchor>
      <arglist>(double _survive, double _die, bool _interpret_as_rate=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop, eoPop&lt; EOT &gt; &amp;_luckyGuys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDetSelect</name>
    <filename>classeo_det_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelect</base>
    <member kind="function">
      <type></type>
      <name>eoDetSelect</name>
      <anchor>a0</anchor>
      <arglist>(double _rate=1.0, bool _interpret_as_rate=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_source, eoPop&lt; EOT &gt; &amp;_dest)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDetTournamentSelect</name>
    <filename>classeo_det_tournament_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoDetTournamentSelect</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _tSize=2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>tSize</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDetTournamentTruncate</name>
    <filename>classeo_det_tournament_truncate.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduce</base>
    <member kind="function">
      <type></type>
      <name>eoDetTournamentTruncate</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _t_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, unsigned _newsize)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>t_size</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDetTournamentTruncateSplit</name>
    <filename>classeo_det_tournament_truncate_split.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduceSplit</base>
    <member kind="function">
      <type></type>
      <name>eoDetTournamentTruncateSplit</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _t_size, eoHowMany _howMany, bool _returnEliminated=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, eoPop&lt; EOT &gt; &amp;_eliminated)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>t_size</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>returnEliminated</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDetTournamentWorthSelect</name>
    <filename>classeo_det_tournament_worth_select.html</filename>
    <templarg>EOT</templarg>
    <templarg>WorthT</templarg>
    <base>eoSelectFromWorth&lt; EOT, WorthT &gt;</base>
    <member kind="typedef">
      <type>std::vector&lt; WorthT &gt;::iterator</type>
      <name>worthIterator</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoDetTournamentWorthSelect</name>
      <anchor>a0</anchor>
      <arglist>(eoPerf2Worth&lt; EOT, WorthT &gt; &amp;perf2Worth, unsigned _tSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>tSize</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDetUniformMutation</name>
    <filename>classeo_det_uniform_mutation.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoDetUniformMutation</name>
      <anchor>a0</anchor>
      <arglist>(const double &amp;_epsilon, const unsigned &amp;_no=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoDetUniformMutation</name>
      <anchor>a1</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds, const double &amp;_epsilon, const unsigned &amp;_no=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoDetUniformMutation</name>
      <anchor>a2</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds, const std::vector&lt; double &gt; &amp;_epsilon, const unsigned &amp;_no=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a4</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>homogeneous</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRealVectorBounds &amp;</type>
      <name>bounds</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>epsilon</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>no</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDistance</name>
    <filename>classeo_distance.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; const EOT &amp;, const EOT &amp;, double &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoDistribUpdater</name>
    <filename>classeo_distrib_updater.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; eoDistribution&lt; EOT &gt; &amp;, eoPop&lt; EOT &gt; &amp;, void &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(eoDistribution&lt; EOT &gt; &amp;, eoPop&lt; EOT &gt; &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDistribution</name>
    <filename>classeo_distribution.html</filename>
    <templarg>EOT</templarg>
    <base>eoInit</base>
    <base>eoPersistent</base>
    <base>eoObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(EOT &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dMatrix</name>
    <filename>classd_matrix.html</filename>
    <member kind="function">
      <type></type>
      <name>dMatrix</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(unsigned _i, unsigned _j) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(unsigned _i, unsigned _j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;_os)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>rSize</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDominanceMap</name>
    <filename>classeo_dominance_map.html</filename>
    <templarg>EoType</templarg>
    <base>eoUF&lt; const eoPop&lt; EoType &gt; &amp;, void &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EoType &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchor>a3</anchor>
      <arglist>(const eoPop&lt; EoType &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>sum_dominators</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>sum_dominants</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; typename EoType::Fitness &gt;</type>
      <name>fitness</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDoubleExchange</name>
    <filename>classeo_double_exchange.html</filename>
    <base>eoBinOp&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoDoubleExchange</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(double &amp;r1, const double &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDoubleIntermediate</name>
    <filename>classeo_double_intermediate.html</filename>
    <base>eoBinOp&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoDoubleIntermediate</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(double &amp;r1, const double &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDrawable</name>
    <filename>classeo_drawable.html</filename>
    <templarg>Object</templarg>
    <member kind="function">
      <type></type>
      <name>eoDrawable</name>
      <anchor>a0</anchor>
      <arglist>(const Object &amp;_o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoDrawable</name>
      <anchor>a1</anchor>
      <arglist>(const eoDrawable &amp;_d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoDrawable</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchor>a3</anchor>
      <arglist>(unsigned _x, unsigned _y)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dummy</name>
    <filename>struct_dummy.html</filename>
    <base>EO&lt; double &gt;</base>
    <base>EO&lt; double &gt;</base>
    <base>EO&lt; double &gt;</base>
    <base>EO&lt; double &gt;</base>
    <base>EO&lt; double &gt;</base>
    <base>EO&lt; double &gt;</base>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dummy</name>
      <anchor>a0</anchor>
      <arglist>(std::string _s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>s</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xdist</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDynSGATransform</name>
    <filename>classeo_dyn_s_g_a_transform.html</filename>
    <templarg>EOT</templarg>
    <base>eoTransform</base>
    <member kind="function">
      <type></type>
      <name>eoDynSGATransform</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; EOT &gt; &amp;_cross, double _cProba, eoMonOp&lt; EOT &gt; &amp;_mutate, double _mProba)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoDynSGATransform</name>
      <anchor>a1</anchor>
      <arglist>(eoQuadOp&lt; EOT &gt; &amp;_cross, double *_cProbaRef, eoMonOp&lt; EOT &gt; &amp;_mutate, double *_mProbaRef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>PCrossHandle</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>PMutHandle</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInvalidateQuadOp&lt; EOT &gt;</type>
      <name>cross</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>crossoverProbaHolder</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double &amp;</type>
      <name>crossoverProba</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInvalidateMonOp&lt; EOT &gt;</type>
      <name>mutate</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mutationProbaHolder</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double &amp;</type>
      <name>mutationProba</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoDynUpdater</name>
    <filename>classeo_dyn_updater.html</filename>
    <base>eoUpdater</base>
    <member kind="function">
      <type></type>
      <name>eoDynUpdater</name>
      <anchor>a0</anchor>
      <arglist>(eoUpdatable &amp;_toUpdate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoUpdatable &amp;</type>
      <name>toUpdate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEasyEA</name>
    <filename>classeo_easy_e_a.html</filename>
    <templarg>EOT</templarg>
    <base>eoAlgo</base>
    <member kind="function">
      <type></type>
      <name>eoEasyEA</name>
      <anchor>a0</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_continuator, eoEvalFunc&lt; EOT &gt; &amp;_eval, eoBreed&lt; EOT &gt; &amp;_breed, eoReplacement&lt; EOT &gt; &amp;_replace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEasyEA</name>
      <anchor>a1</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_continuator, eoPopEvalFunc&lt; EOT &gt; &amp;_eval, eoBreed&lt; EOT &gt; &amp;_breed, eoReplacement&lt; EOT &gt; &amp;_replace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEasyEA</name>
      <anchor>a2</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_continuator, eoEvalFunc&lt; EOT &gt; &amp;_eval, eoBreed&lt; EOT &gt; &amp;_breed, eoMerge&lt; EOT &gt; &amp;_merge, eoReduce&lt; EOT &gt; &amp;_reduce)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEasyEA</name>
      <anchor>a3</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_continuator, eoEvalFunc&lt; EOT &gt; &amp;_eval, eoSelect&lt; EOT &gt; &amp;_select, eoTransform&lt; EOT &gt; &amp;_transform, eoReplacement&lt; EOT &gt; &amp;_replace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEasyEA</name>
      <anchor>a4</anchor>
      <arglist>(eoContinue&lt; EOT &gt; &amp;_continuator, eoEvalFunc&lt; EOT &gt; &amp;_eval, eoSelect&lt; EOT &gt; &amp;_select, eoTransform&lt; EOT &gt; &amp;_transform, eoMerge&lt; EOT &gt; &amp;_merge, eoReduce&lt; EOT &gt; &amp;_reduce)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a5</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoEasyEA::eoDummySelect</type>
      <name>dummySelect</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoEasyEA::eoDummyTransform</type>
      <name>dummyTransform</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoEasyEA::eoDummyEval</type>
      <name>dummyEval</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoContinue&lt; EOT &gt; &amp;</type>
      <name>continuator</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>eval</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoPopLoopEval&lt; EOT &gt;</type>
      <name>loopEval</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoPopEvalFunc&lt; EOT &gt; &amp;</type>
      <name>popEval</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoSelectTransform&lt; EOT &gt;</type>
      <name>selectTransform</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoBreed&lt; EOT &gt; &amp;</type>
      <name>breed</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoNoElitism&lt; EOT &gt;</type>
      <name>dummyMerge</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoTruncate&lt; EOT &gt;</type>
      <name>dummyReduce</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoMergeReduce&lt; EOT &gt;</type>
      <name>mergeReduce</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoReplacement&lt; EOT &gt; &amp;</type>
      <name>replace</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>eoIslandsEasyEA&lt;EOT&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>eoDistEvalEasyEA&lt;EOT&gt;</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEDA</name>
    <filename>classeo_e_d_a.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; eoDistribution&lt; EOT &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoEliteSequentialSelect</name>
    <filename>classeo_elite_sequential_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoEliteSequentialSelect</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>current</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const EOT * &gt;</type>
      <name>eoPters</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoElitism</name>
    <filename>classeo_elitism.html</filename>
    <templarg>EOT</templarg>
    <base>eoMerge&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoElitism</name>
      <anchor>a0</anchor>
      <arglist>(double _rate, bool _interpret_as_rate=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>combien</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EO</name>
    <filename>class_e_o.html</filename>
    <templarg>F</templarg>
    <base>eoObject</base>
    <base>eoPersistent</base>
    <member kind="typedef">
      <type>F</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits</type>
      <name>fitness_traits</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::storage_type</type>
      <name>storage_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::performance_type</type>
      <name>performance_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::worth_type</type>
      <name>worth_type</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EO</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EO</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Fitness</type>
      <name>fitness</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitness</name>
      <anchor>a4</anchor>
      <arglist>(const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invalid</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a6</anchor>
      <arglist>(const EO &amp;_eo2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchor>a7</anchor>
      <arglist>(const EO &amp;_eo2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitness</name>
      <anchor>a9</anchor>
      <arglist>(performance_type perf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performance</name>
      <anchor>a10</anchor>
      <arglist>(performance_type perf)</arglist>
    </member>
    <member kind="function">
      <type>performance_type</type>
      <name>performance</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>worth</name>
      <anchor>a12</anchor>
      <arglist>(worth_type worth)</arglist>
    </member>
    <member kind="function">
      <type>worth_type</type>
      <name>worth</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>worth_type</type>
      <name>fitness</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate_worth</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a17</anchor>
      <arglist>(const EO&lt; Fitness, Traits &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchor>a18</anchor>
      <arglist>(const EO&lt; Fitness, Traits &gt; &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>z10_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>z10_1</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>z10_2</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>repFitness</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>invalidFitness</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>valid_performance</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>valid_worth</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>storage_type</type>
      <name>rep_fitness</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEPReduce</name>
    <filename>classeo_e_p_reduce.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduce</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; float, typename eoPop&lt; EOT &gt;::iterator &gt;</type>
      <name>EPpair</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEPReduce</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _t_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, unsigned _newsize)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>t_size</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEPReplacement</name>
    <filename>classeo_e_p_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoMergeReduce</base>
    <member kind="function">
      <type></type>
      <name>eoEPReplacement</name>
      <anchor>a0</anchor>
      <arglist>(int _tSize)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPlus&lt; EOT &gt;</type>
      <name>plus</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEPReduce&lt; EOT &gt;</type>
      <name>truncate</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEsChromInit</name>
    <filename>classeo_es_chrom_init.html</filename>
    <templarg>EOT</templarg>
    <base>eoRealInitBounded</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>FitT</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEsChromInit</name>
      <anchor>a0</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds, double _sigma=0.3, bool _to_scale=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEsChromInit</name>
      <anchor>a1</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds, std::vector&lt; double &gt; _vecSigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_self_adapt</name>
      <anchor>d0</anchor>
      <arglist>(eoReal&lt; FitT &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_self_adapt</name>
      <anchor>d1</anchor>
      <arglist>(eoEsSimple&lt; FitT &gt; &amp;result)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_self_adapt</name>
      <anchor>d2</anchor>
      <arglist>(eoEsStdev&lt; FitT &gt; &amp;result)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_self_adapt</name>
      <anchor>d3</anchor>
      <arglist>(eoEsFull&lt; FitT &gt; &amp;result)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>uniqueSigma</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>vecSigma</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEsFull</name>
    <filename>classeo_es_full.html</filename>
    <templarg>Fit</templarg>
    <base>eoVector&lt; Fit, double &gt;</base>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>stdevs</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>correlations</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEsGlobalXover</name>
    <filename>classeo_es_global_xover.html</filename>
    <templarg>EOT</templarg>
    <base>eoGenOp</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>FitT</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEsGlobalXover</name>
      <anchor>a0</anchor>
      <arglist>(eoBinOp&lt; double &gt; &amp;_crossObj, eoBinOp&lt; double &gt; &amp;_crossMut)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_production</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchor>a3</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_plop)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cross_self_adapt</name>
      <anchor>d0</anchor>
      <arglist>(eoEsSimple&lt; FitT &gt; &amp;_parent, const eoPop&lt; eoEsSimple&lt; FitT &gt; &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cross_self_adapt</name>
      <anchor>d1</anchor>
      <arglist>(eoEsStdev&lt; FitT &gt; &amp;_parent, const eoPop&lt; eoEsStdev&lt; FitT &gt; &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cross_self_adapt</name>
      <anchor>d2</anchor>
      <arglist>(eoEsFull&lt; FitT &gt; &amp;_parent, const eoPop&lt; eoEsFull&lt; FitT &gt; &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRandomSelect&lt; EOT &gt;</type>
      <name>sel</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBinOp&lt; double &gt; &amp;</type>
      <name>crossObj</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBinOp&lt; double &gt; &amp;</type>
      <name>crossMut</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEsMutate</name>
    <filename>classeo_es_mutate.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>FitT</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEsMutate</name>
      <anchor>a0</anchor>
      <arglist>(eoEsMutationInit &amp;_init, eoRealVectorBounds &amp;_bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoEsMutate</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(eoEsSimple&lt; FitT &gt; &amp;_eo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a4</anchor>
      <arglist>(eoEsStdev&lt; FitT &gt; &amp;_eo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a5</anchor>
      <arglist>(eoEsFull&lt; FitT &gt; &amp;_eo)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchor>d0</anchor>
      <arglist>(eoEsSimple&lt; FitT &gt;, eoEsMutationInit &amp;_init)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchor>d1</anchor>
      <arglist>(eoEsStdev&lt; FitT &gt;, eoEsMutationInit &amp;_init)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchor>d2</anchor>
      <arglist>(eoEsFull&lt; FitT &gt;, eoEsMutationInit &amp;_init)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>TauLcl</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>TauGlb</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>TauBeta</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRealVectorBounds &amp;</type>
      <name>bounds</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>const double</type>
      <name>stdev_eps</name>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEsMutationInit</name>
    <filename>classeo_es_mutation_init.html</filename>
    <member kind="function">
      <type></type>
      <name>eoEsMutationInit</name>
      <anchor>a0</anchor>
      <arglist>(eoParser &amp;_parser, std::string _section=&quot;ES mutation parameters&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoEsMutationInit</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TauLcl</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TauGlb</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TauBeta</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>section</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>TauLclName</name>
      <anchor>b1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char</type>
      <name>TauLclShort</name>
      <anchor>b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>TauGlbName</name>
      <anchor>b3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char</type>
      <name>TauGlbShort</name>
      <anchor>b4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>TauBetaName</name>
      <anchor>b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char</type>
      <name>TauBetaShort</name>
      <anchor>b6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoParser &amp;</type>
      <name>parser</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>repSection</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoValueParam&lt; double &gt; *</type>
      <name>TauLclParam</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoValueParam&lt; double &gt; *</type>
      <name>TauGlbParam</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoValueParam&lt; double &gt; *</type>
      <name>TauBetaParam</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEsSimple</name>
    <filename>classeo_es_simple.html</filename>
    <templarg>Fit</templarg>
    <base>eoVector&lt; Fit, double &gt;</base>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stdev</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEsStandardXover</name>
    <filename>classeo_es_standard_xover.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>FitT</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoEsStandardXover</name>
      <anchor>a0</anchor>
      <arglist>(eoBinOp&lt; double &gt; &amp;_crossObj, eoBinOp&lt; double &gt; &amp;_crossMut)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EOT &amp;_eo1, const EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>cross_self_adapt</name>
      <anchor>d0</anchor>
      <arglist>(eoEsSimple&lt; FitT &gt; &amp;_parent1, const eoEsSimple&lt; FitT &gt; &amp;_parent2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>cross_self_adapt</name>
      <anchor>d1</anchor>
      <arglist>(eoEsStdev&lt; FitT &gt; &amp;_parent1, const eoEsStdev&lt; FitT &gt; &amp;_parent2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>cross_self_adapt</name>
      <anchor>d2</anchor>
      <arglist>(eoEsFull&lt; FitT &gt; &amp;_parent1, const eoEsFull&lt; FitT &gt; &amp;_parent2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRandomSelect&lt; EOT &gt;</type>
      <name>sel</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBinOp&lt; double &gt; &amp;</type>
      <name>crossObj</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBinOp&lt; double &gt; &amp;</type>
      <name>crossMut</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEsStdev</name>
    <filename>classeo_es_stdev.html</filename>
    <templarg>Fit</templarg>
    <base>eoVector&lt; Fit, double &gt;</base>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>stdevs</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEvalContinue</name>
    <filename>classeo_eval_continue.html</filename>
    <templarg>EOT</templarg>
    <base>eoContinue</base>
    <member kind="function">
      <type></type>
      <name>eoEvalContinue</name>
      <anchor>a0</anchor>
      <arglist>(eoEvalFuncCounter&lt; EOT &gt; &amp;_eval, unsigned long _totalEval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_vEO)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>totalEvaluations</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFuncCounter&lt; EOT &gt; &amp;</type>
      <name>eval</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>repTotalEvaluations</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEvalFunc</name>
    <filename>classeo_eval_func.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; EOT &amp;, void &gt;</base>
    <member kind="typedef">
      <type>EOT</type>
      <name>EOType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>EOFitT</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoEvalFuncCounter</name>
    <filename>classeo_eval_func_counter.html</filename>
    <templarg>EOT</templarg>
    <base>eoEvalFunc</base>
    <base>eoValueParam&lt; unsigned long &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoEvalFuncCounter</name>
      <anchor>a0</anchor>
      <arglist>(eoEvalFunc&lt; EOT &gt; &amp;_func, std::string _name=&quot;Eval. &quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>func</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>eoEvalFuncPtr</name>
    <filename>structeo_eval_func_ptr.html</filename>
    <templarg>EOT</templarg>
    <templarg>FitT</templarg>
    <templarg>FunctionArg</templarg>
    <base>eoEvalFunc</base>
    <member kind="function">
      <type></type>
      <name>eoEvalFuncPtr</name>
      <anchor>a0</anchor>
      <arglist>(FitT(*_eval)(FunctionArg))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FitT(*</type>
      <name>evalFunc</name>
      <anchor>r0</anchor>
      <arglist>)(FunctionArg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoExpansionMutation</name>
    <filename>classeo_expansion_mutation.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoMonOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoExpansionMutation</name>
      <anchor>a0</anchor>
      <arglist>(eoInit&lt; EoType &gt; &amp;_init, unsigned _max_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoExpansionMutation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_length</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInit&lt; EoType &gt; &amp;</type>
      <name>initializer</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoExternalBinOp</name>
    <filename>classeo_external_bin_op.html</filename>
    <templarg>F</templarg>
    <templarg>External</templarg>
    <templarg>ExternalEO</templarg>
    <base>eoBinOp&lt; ExternalEO &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoExternalBinOp</name>
      <anchor>a0</anchor>
      <arglist>(bool(*_binop)(External &amp;, const External &amp;))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(ExternalEO &amp;eo1, const ExternalEO &amp;eo2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool(*</type>
      <name>binop</name>
      <anchor>r0</anchor>
      <arglist>)(External &amp;, const External &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoExternalEO</name>
    <filename>classeo_external_e_o.html</filename>
    <templarg>Fit</templarg>
    <templarg>External</templarg>
    <base>EO&lt; Fit &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoExternalEO</name>
      <anchor>a1</anchor>
      <arglist>(const External &amp;ext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoExternalEO</name>
      <anchor>a2</anchor>
      <arglist>(std::istream &amp;is, const External &amp;ext)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoExternalEvalFunc</name>
    <filename>classeo_external_eval_func.html</filename>
    <templarg>F</templarg>
    <templarg>External</templarg>
    <templarg>ExternalEO</templarg>
    <base>eoEvalFunc&lt; ExternalEO &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoExternalEvalFunc</name>
      <anchor>a0</anchor>
      <arglist>(F(*_eval)(const External &amp;))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(ExternalEO &amp;eo)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>F(*</type>
      <name>eval</name>
      <anchor>r0</anchor>
      <arglist>)(const External &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoExternalInit</name>
    <filename>classeo_external_init.html</filename>
    <templarg>F</templarg>
    <templarg>External</templarg>
    <templarg>ExternalEO</templarg>
    <base>eoInit&lt; ExternalEO &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoExternalInit</name>
      <anchor>a0</anchor>
      <arglist>(External(*_init)(void))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(ExternalEO &amp;_eo)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>External(*</type>
      <name>init</name>
      <anchor>r0</anchor>
      <arglist>)(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoExternalMonOp</name>
    <filename>classeo_external_mon_op.html</filename>
    <templarg>F</templarg>
    <templarg>External</templarg>
    <templarg>ExternalEO</templarg>
    <base>eoMonOp&lt; ExternalEO &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoExternalMonOp</name>
      <anchor>a0</anchor>
      <arglist>(bool(*_mutate)(External &amp;))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(ExternalEO &amp;eo)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool(*</type>
      <name>mutate</name>
      <anchor>r0</anchor>
      <arglist>)(External &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoExternalQuadOp</name>
    <filename>classeo_external_quad_op.html</filename>
    <templarg>F</templarg>
    <templarg>External</templarg>
    <templarg>ExternalEO</templarg>
    <base>eoQuadOp&lt; ExternalEO &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoExternalQuadOp</name>
      <anchor>a0</anchor>
      <arglist>(bool(*_quadop)(External &amp;, External &amp;))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(ExternalEO &amp;eo1, ExternalEO &amp;eo2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool(*</type>
      <name>quadop</name>
      <anchor>r0</anchor>
      <arglist>)(External &amp;, External &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoF</name>
    <filename>classeo_f.html</filename>
    <templarg>R</templarg>
    <base>eoFunctorBase</base>
    <member kind="typedef">
      <type>R</type>
      <name>result_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoF</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual R</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>eoFunctorBase::procedure_tag</type>
      <name>functor_category</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFactory</name>
    <filename>classeo_factory.html</filename>
    <templarg>EOClass</templarg>
    <base>eoObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual EOClass *</type>
      <name>make</name>
      <anchor>a0</anchor>
      <arglist>(std::istream &amp;_is)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFactory</name>
      <anchor>z11_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoFactory</name>
      <anchor>z11_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>z13_0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFDCFileSnapshot</name>
    <filename>classeo_f_d_c_file_snapshot.html</filename>
    <templarg>EOT</templarg>
    <base>eoFileSnapshot</base>
    <member kind="function">
      <type></type>
      <name>eoFDCFileSnapshot</name>
      <anchor>a0</anchor>
      <arglist>(eoFDCStat&lt; EOT &gt; &amp;_FDCstat, std::string _dirname=&quot;tmpFDC&quot;, unsigned _frequency=1, std::string _filename=&quot;FDC&quot;, std::string _delim=&quot; &quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchor>a1</anchor>
      <arglist>(const eoParam &amp;_param)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoFDCStat&lt; EOT &gt; &amp;</type>
      <name>FDCstat</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFDCStat</name>
    <filename>classeo_f_d_c_stat.html</filename>
    <templarg>EOT</templarg>
    <base>eoStat&lt; EOT, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoFDCStat</name>
      <anchor>a0</anchor>
      <arglist>(eoDistance&lt; EOT &gt; &amp;_dist, std::string _description=&quot;FDC&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFDCStat</name>
      <anchor>a1</anchor>
      <arglist>(eoDistance&lt; EOT &gt; &amp;_dist, EOT &amp;_theBest, std::string _description=&quot;FDC&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function">
      <type>const eoValueParam&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>theDist</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const eoValueParam&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>theFit</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoDistance&lt; EOT &gt; &amp;</type>
      <name>dist</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EOT</type>
      <name>theBest</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>boolOpt</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoValueParam&lt; std::vector&lt; double &gt; &gt;</type>
      <name>distToBest</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoValueParam&lt; std::vector&lt; double &gt; &gt;</type>
      <name>fitnesses</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFileMonitor</name>
    <filename>classeo_file_monitor.html</filename>
    <base>eoMonitor</base>
    <member kind="function">
      <type></type>
      <name>eoFileMonitor</name>
      <anchor>a0</anchor>
      <arglist>(std::string _filename, std::string _delim=&quot; &quot;, bool _keep=false, bool _header=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoMonitor &amp;</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoMonitor &amp;</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printHeader</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printHeader</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFileName</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>filename</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>delim</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>keep</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>header</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstcall</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFileSnapshot</name>
    <filename>classeo_file_snapshot.html</filename>
    <base>eoMonitor</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>vDouble</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>eoValueParam&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vDoubleParam</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFileSnapshot</name>
      <anchor>a0</anchor>
      <arglist>(std::string _dirname, unsigned _frequency=1, std::string _filename=&quot;gen&quot;, std::string _delim=&quot; &quot;, unsigned _counter=0, bool _rmFiles=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasChanged</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getCounter</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFileName</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentFileName</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>eoMonitor &amp;</type>
      <name>operator()</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>eoMonitor &amp;</type>
      <name>operator()</name>
      <anchor>a6</anchor>
      <arglist>(std::ostream &amp;_os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>getDirName</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>baseFileName</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a9</anchor>
      <arglist>(const eoParam &amp;_param)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>dirname</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>frequency</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>filename</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>delim</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>counter</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>currentFileName</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>boolChanged</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFitContinue</name>
    <filename>classeo_fit_continue.html</filename>
    <templarg>EOT</templarg>
    <base>eoContinue</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>FitnessType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFitContinue</name>
      <anchor>a0</anchor>
      <arglist>(const FitnessType _maximum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FitnessType</type>
      <name>maximum</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFitnessScalingSelect</name>
    <filename>classeo_fitness_scaling_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoRouletteWorthSelect&lt; EOT, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoFitnessScalingSelect</name>
      <anchor>a0</anchor>
      <arglist>(double _p=2.0)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoLinearFitScaling&lt; EOT &gt;</type>
      <name>scaling</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFitnessStat</name>
    <filename>classeo_fitness_stat.html</filename>
    <templarg>EOT</templarg>
    <templarg>FitT</templarg>
    <base>eoSortedStat&lt; EOT, std::vector&lt; FitT &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoFitnessStat</name>
      <anchor>a0</anchor>
      <arglist>(std::string _description=&quot;AllFitnesses&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const std::vector&lt; const EOT * &gt; &amp;_popPters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOr1ptBinOp</name>
    <filename>classeo_fl_or1pt_bin_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVlUniformBinOp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOr1ptQuadOp</name>
    <filename>classeo_fl_or1pt_quad_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVlUniformQuadOp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOrAllAtomBinOp</name>
    <filename>classeo_fl_or_all_atom_bin_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFlOrAllAtomBinOp</name>
      <anchor>a0</anchor>
      <arglist>(eoBinOp&lt; AtomType &gt; &amp;_op, float _rate=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, const EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBinOp&lt; AtomType &gt; &amp;</type>
      <name>op</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOrAllAtomQuadOp</name>
    <filename>classeo_fl_or_all_atom_quad_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFlOrAllAtomQuadOp</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; AtomType &gt; &amp;_op, double _rate=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoQuadOp&lt; AtomType &gt; &amp;</type>
      <name>op</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOrAllMutation</name>
    <filename>classeo_fl_or_all_mutation.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFlOrAllMutation</name>
      <anchor>a0</anchor>
      <arglist>(eoMonOp&lt; AtomType &gt; &amp;_atomMutation, double _rate=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonOp&lt; AtomType &gt; &amp;</type>
      <name>atomMutation</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOrKAtomBinOp</name>
    <filename>classeo_fl_or_k_atom_bin_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFlOrAtomBinOp</name>
      <anchor>a0</anchor>
      <arglist>(eoBinOp&lt; AtomType &gt; &amp;_op, unsigned _k=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, const EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>k</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBinOp&lt; AtomType &gt; &amp;</type>
      <name>op</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOrKAtomQuadOp</name>
    <filename>classeo_fl_or_k_atom_quad_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFlOrAtomQuadOp</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; AtomType &gt; &amp;_op, unsigned _k=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, const EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>k</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoQuadOp&lt; AtomType &gt; &amp;</type>
      <name>op</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOrKMutation</name>
    <filename>classeo_fl_or_k_mutation.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFlOrKMutation</name>
      <anchor>a0</anchor>
      <arglist>(eoMonOp&lt; AtomType &gt; &amp;_atomMutation, unsigned _nb=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nb</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonOp&lt; AtomType &gt; &amp;</type>
      <name>atomMutation</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOrUniformBinOp</name>
    <filename>classeo_fl_or_uniform_bin_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoFlOrUniformBinOp</name>
      <anchor>a0</anchor>
      <arglist>(double _rate=0.5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, const EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFlOrUniformQuadOp</name>
    <filename>classeo_fl_or_uniform_quad_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVlUniformQuadOp</name>
      <anchor>a0</anchor>
      <arglist>(double _rate=0.5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoFunctorBase</name>
    <filename>classeo_functor_base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoFunctorBase</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>eoFunctorBase::binary_function_tag</name>
    <filename>structeo_functor_base_1_1binary__function__tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>eoFunctorBase::procedure_tag</name>
    <filename>structeo_functor_base_1_1procedure__tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>eoFunctorBase::unary_function_tag</name>
    <filename>structeo_functor_base_1_1unary__function__tag.html</filename>
  </compound>
  <compound kind="class">
    <name>eoFunctorStore</name>
    <filename>classeo_functor_store.html</filename>
    <member kind="function">
      <type></type>
      <name>eoFunctorStore</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoFunctorStore</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Functor &amp;</type>
      <name>storeFunctor</name>
      <anchor>a2</anchor>
      <arglist>(Functor *r)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>eoFunctorStore</name>
      <anchor>d0</anchor>
      <arglist>(const eoFunctorStore &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>eoFunctorStore</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const eoFunctorStore &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoFunctorBase * &gt;</type>
      <name>vec</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoG3Replacement</name>
    <filename>classeo_g3_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoReplacement</base>
    <member kind="function">
      <type></type>
      <name>eoG3Replacement</name>
      <anchor>a0</anchor>
      <arglist>(eoHowMany _howManyEliminatedParents=eoHowMany(2, false))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoLinearTruncateSplit&lt; EOT &gt;</type>
      <name>split</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoTruncateSplit&lt; EOT &gt;</type>
      <name>reduce</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPlus&lt; EOT &gt;</type>
      <name>plus</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGenContinue</name>
    <filename>classeo_gen_continue.html</filename>
    <templarg>EOT</templarg>
    <base>eoContinue</base>
    <base>eoValueParam&lt; unsigned &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoGenContinue</name>
      <anchor>a0</anchor>
      <arglist>(unsigned long _totalGens)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoGenContinue</name>
      <anchor>a1</anchor>
      <arglist>(unsigned long _totalGens, unsigned long &amp;_currentGen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_vEO)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>totalGenerations</name>
      <anchor>a3</anchor>
      <arglist>(unsigned long _tg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>totalGenerations</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a6</anchor>
      <arglist>(std::istream &amp;__is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;__os) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>repTotalGenerations</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>thisGenerationPlaceHolder</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long &amp;</type>
      <name>thisGeneration</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGeneDelChooser</name>
    <filename>classeo_gene_del_chooser.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; EOT &amp;, unsigned int &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a0</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGeneralBreeder</name>
    <filename>classeo_general_breeder.html</filename>
    <templarg>EOT</templarg>
    <base>eoBreed</base>
    <member kind="function">
      <type></type>
      <name>eoGeneralBreeder</name>
      <anchor>a0</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, eoGenOp&lt; EOT &gt; &amp;_op, double _rate=1.0, bool _interpret_as_rate=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoGeneralBreeder</name>
      <anchor>a1</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, eoGenOp&lt; EOT &gt; &amp;_op, eoHowMany _howMany)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>select</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoGenOp&lt; EOT &gt; &amp;</type>
      <name>op</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGeneralIntBounds</name>
    <filename>classeo_general_int_bounds.html</filename>
    <base>eoIntBounds</base>
    <member kind="function">
      <type></type>
      <name>eoGeneralIntBounds</name>
      <anchor>a0</anchor>
      <arglist>(std::string _s=&quot;[-infinity,+infinity]&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoGeneralIntBounds</name>
      <anchor>a1</anchor>
      <arglist>(const eoGeneralIntBounds &amp;_b)</arglist>
    </member>
    <member kind="function">
      <type>eoGeneralIntBounds &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const eoGeneralIntBounds &amp;_b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~eoGeneralIntBounds</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a8</anchor>
      <arglist>(double _x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a9</anchor>
      <arglist>(double &amp;_x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a10</anchor>
      <arglist>(double &amp;_x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>minimum</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>maximum</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>range</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a14</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>random</name>
      <anchor>a15</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoIntBounds *</type>
      <name>dup</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const eoIntBounds &amp;</type>
      <name>theBounds</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a18</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a19</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>eoIntBounds *</type>
      <name>getBoundsFromString</name>
      <anchor>d0</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoIntBounds *</type>
      <name>repBound</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGeneralRealBounds</name>
    <filename>classeo_general_real_bounds.html</filename>
    <base>eoRealBounds</base>
    <member kind="function">
      <type></type>
      <name>eoGeneralRealBounds</name>
      <anchor>a0</anchor>
      <arglist>(std::string _s=&quot;[-infinity,+infinity]&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoGeneralRealBounds</name>
      <anchor>a1</anchor>
      <arglist>(const eoGeneralRealBounds &amp;_b)</arglist>
    </member>
    <member kind="function">
      <type>eoGeneralRealBounds &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const eoGeneralRealBounds &amp;_b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~eoGeneralRealBounds</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a8</anchor>
      <arglist>(double _x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a9</anchor>
      <arglist>(double &amp;_x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a10</anchor>
      <arglist>(double &amp;_x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minimum</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>maximum</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>range</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a14</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoRealBounds *</type>
      <name>dup</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const eoRealBounds &amp;</type>
      <name>theBounds</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a17</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a18</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>eoRealBounds *</type>
      <name>getBoundsFromString</name>
      <anchor>d0</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRealBounds *</type>
      <name>repBound</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGenerationalReplacement</name>
    <filename>classeo_generational_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoReplacement</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGenOp</name>
    <filename>classeo_gen_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoOp&lt; EOT &gt;</base>
    <base>eoUF&lt; eoPopulator&lt; EOT &gt; &amp;, void &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoGenOp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>max_production</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>b0</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_pop)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGnuplot</name>
    <filename>classeo_gnuplot.html</filename>
    <member kind="function">
      <type></type>
      <name>eoGnuplot</name>
      <anchor>a0</anchor>
      <arglist>(std::string _title, std::string _extra=std::string(&quot;&quot;))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoGnuplot</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gnuplotCommand</name>
      <anchor>a3</anchor>
      <arglist>(const char *_command)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gnuplotCommand</name>
      <anchor>a4</anchor>
      <arglist>(std::string _command)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initGnuPlot</name>
      <anchor>b0</anchor>
      <arglist>(std::string _title, std::string _extra)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>firstTime</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PCom *</type>
      <name>gpCom</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>unsigned</type>
      <name>numWindow</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGnuplot1DMonitor</name>
    <filename>classeo_gnuplot1_d_monitor.html</filename>
    <base>eoFileMonitor</base>
    <base>eoGnuplot</base>
    <member kind="function">
      <type></type>
      <name>eoGnuplot1DMonitor</name>
      <anchor>a0</anchor>
      <arglist>(std::string _filename, bool _top=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoGnuplot1DMonitor</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoMonitor &amp;</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FirstPlot</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoGnuplot1DSnapshot</name>
    <filename>classeo_gnuplot1_d_snapshot.html</filename>
    <base>eoFileSnapshot</base>
    <base>eoGnuplot</base>
    <member kind="function">
      <type></type>
      <name>eoGnuplot1DSnapshot</name>
      <anchor>a0</anchor>
      <arglist>(std::string _dirname, unsigned _frequency=1, std::string _filename=&quot;gen&quot;, std::string _delim=&quot; &quot;, unsigned _counter=0, bool _rmFiles=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoGnuplot1DSnapshot</name>
      <anchor>a1</anchor>
      <arglist>(std::string _dirname, eoRealVectorBounds &amp;_bounds, unsigned _frequency=1, std::string _filename=&quot;gen&quot;, std::string _delim=&quot; &quot;, unsigned _counter=0, bool _rmFiles=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoGnuplot1DSnapshot</name>
      <anchor>a2</anchor>
      <arglist>(eoFileSnapshot &amp;_fSnapshot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoGnuplot1DSnapshot</name>
      <anchor>a3</anchor>
      <arglist>(eoFileSnapshot &amp;_fSnapshot, eoRealVectorBounds &amp;_bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoMonitor &amp;</type>
      <name>operator()</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBounds</name>
      <anchor>a7</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPointSize</name>
      <anchor>a8</anchor>
      <arglist>(unsigned _pointSize)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>pointSize</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoHammingDistance</name>
    <filename>classeo_hamming_distance.html</filename>
    <templarg>EOT</templarg>
    <base>eoDistance</base>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const EOT &amp;_v1, const EOT &amp;_v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoHoistMutation</name>
    <filename>classeo_hoist_mutation.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoMonOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoHoistMutation</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoHoistMutation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoHowMany</name>
    <filename>classeo_how_many.html</filename>
    <base>eoPersistent</base>
    <member kind="function">
      <type></type>
      <name>eoHowMany</name>
      <anchor>a0</anchor>
      <arglist>(double _rate=0.0, bool _interpret_as_rate=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoHowMany</name>
      <anchor>a1</anchor>
      <arglist>(int _combien)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoHowMany</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int _combien)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoHowMany</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>operator()</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int _size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a6</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a7</anchor>
      <arglist>(std::string _value)</arglist>
    </member>
    <member kind="function">
      <type>eoHowMany</type>
      <name>operator-</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>combien</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoIncrementor</name>
    <filename>classeo_incrementor.html</filename>
    <templarg>T</templarg>
    <base>eoUpdater</base>
    <member kind="function">
      <type></type>
      <name>eoIncrementor</name>
      <anchor>a0</anchor>
      <arglist>(T &amp;_counter, T _stepsize=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T &amp;</type>
      <name>counter</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>stepsize</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoIncrementorParam</name>
    <filename>classeo_incrementor_param.html</filename>
    <templarg>T</templarg>
    <base>eoUpdater</base>
    <base>eoValueParam&lt; T &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoIncrementorParam</name>
      <anchor>a0</anchor>
      <arglist>(std::string _name, T _stepsize=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoIncrementorParam</name>
      <anchor>a1</anchor>
      <arglist>(std::string _name, T _countValue, T _stepsize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>stepsize</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInit</name>
    <filename>classeo_init.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; EOT &amp;, void &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a0</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInitAdaptor</name>
    <filename>classeo_init_adaptor.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoInitAdaptor</name>
      <anchor>a0</anchor>
      <arglist>(eoInit&lt; EOT &gt; &amp;_init)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eot)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInit&lt; EOT &gt; &amp;</type>
      <name>init</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInitFixedLength</name>
    <filename>classeo_init_fixed_length.html</filename>
    <templarg>EOT</templarg>
    <base>eoInit</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoInitFixedLength</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _combien, eoRndGenerator&lt; AtomType &gt; &amp;_generator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;chrom)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>combien</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSTLF&lt; AtomType &gt;</type>
      <name>generator</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInitGenerator</name>
    <filename>classeo_init_generator.html</filename>
    <templarg>EOT</templarg>
    <base>eoF&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoInitGenerator</name>
      <anchor>a0</anchor>
      <arglist>(eoInit&lt; EOT &gt; &amp;_init)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EOT</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInit&lt; EOT &gt; &amp;</type>
      <name>init</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInitVariableLength</name>
    <filename>classeo_init_variable_length.html</filename>
    <templarg>EOT</templarg>
    <base>eoInit</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoInitVariableLength</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _minSize, unsigned _maxSize, eoInit&lt; AtomType &gt; &amp;_init)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_chrom)</arglist>
    </member>
    <member kind="function">
      <type>eoInit&lt; AtomType &gt; &amp;</type>
      <name>atomInit</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>offset</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>extent</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInit&lt; AtomType &gt; &amp;</type>
      <name>init</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInitVirus</name>
    <filename>classeo_init_virus.html</filename>
    <templarg>FitT</templarg>
    <base>eoInit&lt; eoVirus&lt; FitT &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoInitVirus</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _combien, eoRndGenerator&lt; bool &gt; &amp;_generator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoVirus&lt; FitT &gt; &amp;chrom)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>combien</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSTLF&lt; bool &gt;</type>
      <name>generator</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInitVirus1bit</name>
    <filename>classeo_init_virus1bit.html</filename>
    <templarg>FitT</templarg>
    <base>eoInit&lt; eoVirus&lt; FitT &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoInitVirus1bit</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _combien, eoRndGenerator&lt; bool &gt; &amp;_generator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoVirus&lt; FitT &gt; &amp;chrom)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>combien</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSTLF&lt; bool &gt;</type>
      <name>generator</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInnerExchangeQuadOp</name>
    <filename>classeo_inner_exchange_quad_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoInnerExchangeQuadOp</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; AtomType &gt; &amp;_op, float _rate=0.5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoQuadOp&lt; AtomType &gt; &amp;</type>
      <name>op</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoIntAboveBound</name>
    <filename>classeo_int_above_bound.html</filename>
    <base>eoIntBounds</base>
    <member kind="function">
      <type></type>
      <name>eoIntAboveBound</name>
      <anchor>a1</anchor>
      <arglist>(long int _max=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>maximum</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>minimum</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>range</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a5</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>random</name>
      <anchor>a6</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a11</anchor>
      <arglist>(double _r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a12</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a13</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a14</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a15</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoIntBounds *</type>
      <name>dup</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long int</type>
      <name>repMaximum</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoIntBelowBound</name>
    <filename>classeo_int_below_bound.html</filename>
    <base>eoIntBounds</base>
    <member kind="function">
      <type></type>
      <name>eoIntBelowBound</name>
      <anchor>a1</anchor>
      <arglist>(long int _min=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>minimum</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>maximum</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>range</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a5</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>random</name>
      <anchor>a6</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a11</anchor>
      <arglist>(double _r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a12</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a13</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a14</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a15</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoIntBounds *</type>
      <name>dup</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long int</type>
      <name>repMinimum</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoIntBounds</name>
    <filename>classeo_int_bounds.html</filename>
    <base>eoPersistent</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a1</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a2</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a3</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a4</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a5</anchor>
      <arglist>(double) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a6</anchor>
      <arglist>(double &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a7</anchor>
      <arglist>(long int &amp;i) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a8</anchor>
      <arglist>(double &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a9</anchor>
      <arglist>(long int &amp;i) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long int</type>
      <name>minimum</name>
      <anchor>a10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long int</type>
      <name>maximum</name>
      <anchor>a11</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long int</type>
      <name>range</name>
      <anchor>a12</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a13</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long int</type>
      <name>random</name>
      <anchor>a14</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual eoIntBounds *</type>
      <name>dup</name>
      <anchor>a15</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoIntInterval</name>
    <filename>classeo_int_interval.html</filename>
    <base>eoIntBounds</base>
    <member kind="function">
      <type></type>
      <name>eoIntInterval</name>
      <anchor>a1</anchor>
      <arglist>(long int _min=0, long int _max=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>minimum</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>maximum</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>range</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a9</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>random</name>
      <anchor>a10</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a11</anchor>
      <arglist>(double _r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a12</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a13</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a14</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a15</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoIntBounds *</type>
      <name>dup</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long int</type>
      <name>repMinimum</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long int</type>
      <name>repMaximum</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long int</type>
      <name>repRange</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoIntNoBounds</name>
    <filename>classeo_int_no_bounds.html</filename>
    <base>eoIntBounds</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a5</anchor>
      <arglist>(double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a6</anchor>
      <arglist>(double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a7</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>minimum</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>maximum</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>range</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a11</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long int</type>
      <name>random</name>
      <anchor>a12</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a13</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a14</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoIntBounds *</type>
      <name>dup</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInvalidateBinOp</name>
    <filename>classeo_invalidate_bin_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoInvalidateBinOp</name>
      <anchor>a0</anchor>
      <arglist>(eoBinOp&lt; EOT &gt; &amp;_op)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo, const EOT &amp;_eo2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBinOp&lt; EOT &gt; &amp;</type>
      <name>op</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInvalidateMonOp</name>
    <filename>classeo_invalidate_mon_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoInvalidateMonOp</name>
      <anchor>a0</anchor>
      <arglist>(eoMonOp&lt; EOT &gt; &amp;_op)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonOp&lt; EOT &gt; &amp;</type>
      <name>op</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoInvalidateQuadOp</name>
    <filename>classeo_invalidate_quad_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoInvalidateQuadOp</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; EOT &gt; &amp;_op)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, EOT &amp;_eo2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoQuadOp&lt; EOT &gt; &amp;</type>
      <name>op</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoLinearFitScaling</name>
    <filename>classeo_linear_fit_scaling.html</filename>
    <templarg>EOT</templarg>
    <base>eoPerf2Worth&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoLinearFitScaling</name>
      <anchor>a0</anchor>
      <arglist>(double _p=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>pressure</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoLinearRandomSplit</name>
    <filename>classeo_linear_random_split.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduceSplit</base>
    <member kind="function">
      <type></type>
      <name>eoLinearRandomSplit</name>
      <anchor>a0</anchor>
      <arglist>(eoHowMany _howMany, bool _returnEliminated=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, eoPop&lt; EOT &gt; &amp;_eliminated)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>returnEliminated</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoLinearTruncate</name>
    <filename>classeo_linear_truncate.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduce</base>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator()</name>
      <anchor>d0</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, unsigned _newsize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoLinearTruncateSplit</name>
    <filename>classeo_linear_truncate_split.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduceSplit</base>
    <member kind="function">
      <type></type>
      <name>eoLinearTruncateSplit</name>
      <anchor>a0</anchor>
      <arglist>(eoHowMany _howMany, bool _returnEliminated=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, eoPop&lt; EOT &gt; &amp;_eliminated)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>returnEliminated</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemPool</name>
    <filename>class_mem_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>MemPool</name>
      <anchor>a0</anchor>
      <arglist>(unsigned int sz)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchor>a3</anchor>
      <arglist>(void *b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>grow</name>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Chunk *</type>
      <name>chunks</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const unsigned int</type>
      <name>esize</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Link *</type>
      <name>head</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoMerge</name>
    <filename>classeo_merge.html</filename>
    <templarg>Chrom</templarg>
    <base>eoBF&lt; const eoPop&lt; Chrom &gt; &amp;, eoPop&lt; Chrom &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoMergeReduce</name>
    <filename>classeo_merge_reduce.html</filename>
    <templarg>EOT</templarg>
    <base>eoReplacement</base>
    <member kind="function">
      <type></type>
      <name>eoMergeReduce</name>
      <anchor>a0</anchor>
      <arglist>(eoMerge&lt; EOT &gt; &amp;_merge, eoReduce&lt; EOT &gt; &amp;_reduce)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMerge&lt; EOT &gt; &amp;</type>
      <name>merge</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoReduce&lt; EOT &gt; &amp;</type>
      <name>reduce</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoMGGReplacement</name>
    <filename>classeo_m_g_g_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoReplacement</base>
    <member kind="function">
      <type></type>
      <name>eoMGGReplacement</name>
      <anchor>a0</anchor>
      <arglist>(eoHowMany _howManyEliminatedParents=eoHowMany(2, false), unsigned _tSize=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoLinearTruncateSplit&lt; EOT &gt;</type>
      <name>split</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPlus&lt; EOT &gt;</type>
      <name>plus</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>tSize</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinimizingTraits</name>
    <filename>class_minimizing_traits.html</filename>
    <base>eoParetoFitnessTraits</base>
    <member kind="function" static="yes">
      <type>bool</type>
      <name>maximizing</name>
      <anchor>e0</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoMOFitnessStat</name>
    <filename>classeo_m_o_fitness_stat.html</filename>
    <templarg>EOT</templarg>
    <templarg>PartFitT</templarg>
    <base>eoSortedStat&lt; EOT, std::vector&lt; PartFitT &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoMOFitnessStat</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _objective, std::string _description=&quot;MO-Fitness&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const std::vector&lt; const EOT * &gt; &amp;_popPters)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>objective</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoMonCloneOp</name>
    <filename>classeo_mon_clone_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoMonCloneOp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EOT &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoMonGenOp</name>
    <filename>classeo_mon_gen_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoGenOp</base>
    <member kind="function">
      <type></type>
      <name>eoMonGenOp</name>
      <anchor>a0</anchor>
      <arglist>(eoMonOp&lt; EOT &gt; &amp;_op)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_production</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_it)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonOp&lt; EOT &gt; &amp;</type>
      <name>op</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoMonitor</name>
    <filename>classeo_monitor.html</filename>
    <base>eoF&lt; eoMonitor &amp; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lastCall</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchor>a1</anchor>
      <arglist>(const eoParam &amp;_param)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; const eoParam * &gt;::iterator</type>
      <name>iterator</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const eoParam * &gt;</type>
      <name>vec</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoMonOp</name>
    <filename>classeo_mon_op.html</filename>
    <templarg>EOType</templarg>
    <base>eoOp</base>
    <base>eoUF&lt; EOType &amp;, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoMonOp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNDPlusReplacement</name>
    <filename>classeo_n_d_plus_replacement.html</filename>
    <templarg>EOT</templarg>
    <templarg>WorthT</templarg>
    <base>eoReplacement</base>
    <base>eoReplacement</base>
    <member kind="function">
      <type></type>
      <name>eoNDPlusReplacement</name>
      <anchor>a0</anchor>
      <arglist>(eoPerf2Worth&lt; EOT, WorthT &gt; &amp;_perf2worth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoNDPlusReplacement</name>
      <anchor>a2</anchor>
      <arglist>(eoPerf2Worth&lt; EOT, WorthT &gt; &amp;_perf2worth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPerf2Worth&lt; EOT, WorthT &gt; &amp;</type>
      <name>perf2worth</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPerf2Worth&lt; EOT, WorthT &gt; &amp;</type>
      <name>perf2worth</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNDSorting</name>
    <filename>classeo_n_d_sorting.html</filename>
    <templarg>EOT</templarg>
    <base>eoPerf2WorthCached&lt; EOT, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoNDSorting</name>
      <anchor>a0</anchor>
      <arglist>(bool nasty_flag_=false)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>niche_penalty</name>
      <anchor>a2</anchor>
      <arglist>(const std::vector&lt; unsigned &gt; &amp;current_front, const eoPop&lt; EOT &gt; &amp;_pop)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_worths</name>
      <anchor>a3</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nasty_declone_flag_that_only_is_implemented_for_two_objectives</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>one_objective</name>
      <anchor>d0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>two_objectives</name>
      <anchor>d1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>m_objectives</name>
      <anchor>d2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>rank_to_worth</name>
      <anchor>d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNDSorting::DummyEO</name>
    <filename>classeo_n_d_sorting_1_1_dummy_e_o.html</filename>
    <base>EO&lt; EOT::Fitness &gt;</base>
    <member kind="variable">
      <type>unsigned</type>
      <name>index</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNDSorting_I</name>
    <filename>classeo_n_d_sorting___i.html</filename>
    <templarg>EOT</templarg>
    <base>eoNDSorting</base>
    <member kind="function">
      <type></type>
      <name>eoNDSorting_I</name>
      <anchor>a0</anchor>
      <arglist>(double _nicheSize, bool nasty_flag_=false)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>niche_penalty</name>
      <anchor>a1</anchor>
      <arglist>(const std::vector&lt; unsigned &gt; &amp;current_front, const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>nicheSize</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNDSorting_II</name>
    <filename>classeo_n_d_sorting___i_i.html</filename>
    <templarg>EOT</templarg>
    <base>eoNDSorting</base>
    <member kind="typedef">
      <type>std::pair&lt; double, unsigned &gt;</type>
      <name>double_index_pair</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoNDSorting_II</name>
      <anchor>a0</anchor>
      <arglist>(bool nasty_flag_=false)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>niche_penalty</name>
      <anchor>a1</anchor>
      <arglist>(const std::vector&lt; unsigned &gt; &amp;_cf, const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>negexp_generator</name>
    <filename>classnegexp__generator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>negexp_generator</name>
      <anchor>a0</anchor>
      <arglist>(T _mean=1.0, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>mean</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>negexp</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNegExpGenerator</name>
    <filename>classeo_neg_exp_generator.html</filename>
    <templarg>T</templarg>
    <base>eoRndGenerator</base>
    <member kind="function">
      <type></type>
      <name>eoNegExpGenerator</name>
      <anchor>a0</anchor>
      <arglist>(T _mean=1.0, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>mean</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>negexp</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNegExpInit</name>
    <filename>classeo_neg_exp_init.html</filename>
    <templarg>T</templarg>
    <base>eoInit&lt; T &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoNegExpInit</name>
      <anchor>a0</anchor>
      <arglist>(T _mean=1.0, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(T &amp;_t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>mean</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>negexp</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NodeSelector</name>
    <filename>class_node_selector.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual NodeSelection</type>
      <name>select_node</name>
      <anchor>a1</anchor>
      <arglist>(Sym sym) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNoElitism</name>
    <filename>classeo_no_elitism.html</filename>
    <templarg>EOT</templarg>
    <base>eoElitism</base>
  </compound>
  <compound kind="class">
    <name>eoNoPerf2Worth</name>
    <filename>classeo_no_perf2_worth.html</filename>
    <templarg>EOT</templarg>
    <base>eoPerf2Worth&lt; EOT, EOT::Fitness &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>normal_generator</name>
    <filename>classnormal__generator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>normal_generator</name>
      <anchor>a0</anchor>
      <arglist>(T _stdev=T(1.0), eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>stdev</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>normal</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNormalGenerator</name>
    <filename>classeo_normal_generator.html</filename>
    <templarg>T</templarg>
    <base>eoRndGenerator</base>
    <member kind="function">
      <type></type>
      <name>eoNormalGenerator</name>
      <anchor>a0</anchor>
      <arglist>(T _stdev=T(1.0), eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>stdev</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>normal</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNormalInit</name>
    <filename>classeo_normal_init.html</filename>
    <templarg>T</templarg>
    <base>eoInit&lt; T &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoNormalInit</name>
      <anchor>a0</anchor>
      <arglist>(T _stdev=T(1.0), eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(T &amp;_t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>stdev</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>normal</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNormalMutation</name>
    <filename>classeo_normal_mutation.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoNormalMutation</name>
      <anchor>a0</anchor>
      <arglist>(double &amp;_sigma, const double &amp;_p_change=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoNormalMutation</name>
      <anchor>a1</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds, double _sigma, const double &amp;_p_change=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>Sigma</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double &amp;</type>
      <name>sigma</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRealVectorBounds &amp;</type>
      <name>bounds</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>p_change</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNormalVecMutation</name>
    <filename>classeo_normal_vec_mutation.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoNormalVecMutation</name>
      <anchor>a0</anchor>
      <arglist>(double _sigma, const double &amp;_p_change=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoNormalVecMutation</name>
      <anchor>a1</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds, double _sigma, const double &amp;_p_change=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>sigma</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRealVectorBounds &amp;</type>
      <name>bounds</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>p_change</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNoSelect</name>
    <filename>classeo_no_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoNoSelect</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>current</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNPtsBitXover</name>
    <filename>classeo_n_pts_bit_xover.html</filename>
    <templarg>Chrom</templarg>
    <base>eoQuadOp&lt; Chrom &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoNPtsBitXover</name>
      <anchor>a0</anchor>
      <arglist>(const unsigned &amp;_num_points=2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(Chrom &amp;chrom1, Chrom &amp;chrom2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>num_points</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoNthElementFitnessStat</name>
    <filename>classeo_nth_element_fitness_stat.html</filename>
    <templarg>EOT</templarg>
    <base>eoSortedStat&lt; EOT, EOT::Fitness &gt;</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoNthElementFitnessStat</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _whichElement, std::string _description=&quot;nth element fitness&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const std::vector&lt; const EOT * &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doit</name>
      <anchor>d0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop, eoParetoFitness&lt; T &gt;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doit</name>
      <anchor>d1</anchor>
      <arglist>(const std::vector&lt; const EOT * &gt; &amp;_pop, T)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>whichElement</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoObject</name>
    <filename>classeo_object.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoObject</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoOneFifthMutation</name>
    <filename>classeo_one_fifth_mutation.html</filename>
    <templarg>EOT</templarg>
    <base>eoNormalMutation</base>
    <base>eoUpdatable</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoOneFifthMutation</name>
      <anchor>a0</anchor>
      <arglist>(eoEvalFunc&lt; EOT &gt; &amp;_eval, double &amp;_sigmaInit, unsigned _windowSize=10, double _updateFactor=0.83, double _threshold=0.2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>eval</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>threshold</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>updateFactor</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>nbMut</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>nbSuccess</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>genIndex</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoOneMax</name>
    <filename>classeo_one_max.html</filename>
    <templarg>FitT</templarg>
    <base>EO&lt; FitT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoOneMax</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a3</anchor>
      <arglist>(ostream &amp;_os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a4</anchor>
      <arglist>(istream &amp;_is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setB</name>
      <anchor>a5</anchor>
      <arglist>(vector&lt; bool &gt; &amp;_b)</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; bool &gt; &amp;</type>
      <name>B</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>b</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoOneMaxEvalFunc</name>
    <filename>classeo_one_max_eval_func.html</filename>
    <templarg>EOT</templarg>
    <base>eoEvalFunc</base>
    <member kind="function">
      <type></type>
      <name>eoOneMaxEvalFunc</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoOneMaxInit</name>
    <filename>classeo_one_max_init.html</filename>
    <templarg>GenotypeT</templarg>
    <base>eoInit&lt; GenotypeT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoOneMaxInit</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _vecSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(GenotypeT &amp;_genotype)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>vecSize</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoOneMaxMutation</name>
    <filename>classeo_one_max_mutation.html</filename>
    <templarg>GenotypeT</templarg>
    <base>eoMonOp&lt; GenotypeT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoOneMaxMutation</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(GenotypeT &amp;_genotype)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoOneMaxQuadCrossover</name>
    <filename>classeo_one_max_quad_crossover.html</filename>
    <templarg>GenotypeT</templarg>
    <base>eoQuadOp&lt; GenotypeT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoOneMaxQuadCrossover</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(GenotypeT &amp;_genotype1, GenotypeT &amp;_genotype2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoOp</name>
    <filename>classeo_op.html</filename>
    <templarg>EOType</templarg>
    <member kind="function">
      <type></type>
      <name>eoOp</name>
      <anchor>z14_1</anchor>
      <arglist>(OpType _type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoOp</name>
      <anchor>z14_2</anchor>
      <arglist>(const eoOp &amp;_eop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoOp</name>
      <anchor>z14_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OpType</type>
      <name>getType</name>
      <anchor>z14_4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OpType</type>
      <name>opType</name>
      <anchor>z14_5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoOpContainer</name>
    <filename>classeo_op_container.html</filename>
    <templarg>EOT</templarg>
    <base>eoGenOp</base>
    <member kind="function">
      <type></type>
      <name>eoOpContainer</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoOpContainer</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>max_production</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a3</anchor>
      <arglist>(eoOp&lt; EOT &gt; &amp;_op, double _rate)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>rates</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; eoGenOp&lt; EOT &gt; * &gt;</type>
      <name>ops</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoFunctorStore</type>
      <name>store</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_to_produce</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoOpSelMason</name>
    <filename>classeo_op_sel_mason.html</filename>
    <templarg>eoClass</templarg>
    <base>eoFactory&lt; eoOpSelector&lt; eoClass &gt; &gt;</base>
    <member kind="typedef">
      <type>std::vector&lt; eoOp&lt; eoClass &gt; * &gt;</type>
      <name>vOpP</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; eoOpSelector&lt; eoClass &gt; *, vOpP &gt;</type>
      <name>MEV</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoOpSelector&lt; eoClass &gt; *</type>
      <name>make</name>
      <anchor>a0</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoOpSelMason</name>
      <anchor>z15_0</anchor>
      <arglist>(eoOpFactory&lt; eoClass &gt; &amp;_opFact)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoOpSelMason</name>
      <anchor>z15_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>z17_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; eoOpSelector&lt; eoClass &gt; *, std::vector&lt; eoOp&lt; eoClass &gt; * &gt; &gt;</type>
      <name>allocMap</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoOpFactory&lt; eoClass &gt; &amp;</type>
      <name>operatorFactory</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParam</name>
    <filename>classeo_param.html</filename>
    <member kind="function">
      <type></type>
      <name>eoParam</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoParam</name>
      <anchor>a1</anchor>
      <arglist>(std::string _longName, std::string _default, std::string _description, char _shortName=0, bool _required=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoParam</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getValue</name>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchor>a4</anchor>
      <arglist>(const std::string &amp;_value)=0</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>shortName</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>longName</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>defValue</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defValue</name>
      <anchor>a9</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLongName</name>
      <anchor>a10</anchor>
      <arglist>(std::string _longName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>required</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>repLongName</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>repDefault</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>repDescription</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>repShortHand</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>repRequired</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParameterLoader</name>
    <filename>classeo_parameter_loader.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoParameterLoader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processParam</name>
      <anchor>a1</anchor>
      <arglist>(eoParam &amp;param, std::string section=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isItThere</name>
      <anchor>a2</anchor>
      <arglist>(eoParam &amp;_param) const =0</arglist>
    </member>
    <member kind="function">
      <type>eoValueParam&lt; ValueType &gt; &amp;</type>
      <name>createParam</name>
      <anchor>a3</anchor>
      <arglist>(ValueType _defaultValue, std::string _longName, std::string _description, char _shortHand=0, std::string _section=&quot;&quot;, bool _required=false)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoParam * &gt;</type>
      <name>ownedParams</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParamParamType</name>
    <filename>classeo_param_param_type.html</filename>
    <member kind="function">
      <type></type>
      <name>eoParamParamType</name>
      <anchor>a0</anchor>
      <arglist>(std::string _value)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printOn</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>readFrom</name>
      <anchor>a2</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a3</anchor>
      <arglist>(std::string &amp;_value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParetoFitness</name>
    <filename>classeo_pareto_fitness.html</filename>
    <templarg>FitnessTraits</templarg>
    <member kind="typedef">
      <type>FitnessTraits</type>
      <name>fitness_traits</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoParetoFitness</name>
      <anchor>a1</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;_v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dominates</name>
      <anchor>a2</anchor>
      <arglist>(const eoParetoFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a3</anchor>
      <arglist>(const eoParetoFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchor>a4</anchor>
      <arglist>(const eoParetoFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(const eoParetoFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const eoParetoFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a7</anchor>
      <arglist>(const eoParetoFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a8</anchor>
      <arglist>(const eoParetoFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setUp</name>
      <anchor>e0</anchor>
      <arglist>(unsigned _n, std::vector&lt; bool &gt; &amp;_b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>bool</type>
      <name>maximizing</name>
      <anchor>e1</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParetoFitnessTraits</name>
    <filename>classeo_pareto_fitness_traits.html</filename>
    <member kind="function" static="yes">
      <type>unsigned</type>
      <name>nObjectives</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>double</type>
      <name>tol</name>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>bool</type>
      <name>maximizing</name>
      <anchor>e2</anchor>
      <arglist>(int which)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParetoOneConstraintFitness</name>
    <filename>classeo_pareto_one_constraint_fitness.html</filename>
    <templarg>FitnessTraits</templarg>
    <member kind="typedef">
      <type>FitnessTraits</type>
      <name>fitness_traits</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoParetoOneConstraintFitness</name>
      <anchor>a1</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;_v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoParetoOneConstraintFitness</name>
      <anchor>a2</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;_v, double _c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>feasible</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>violation</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConstraintValue</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConstraintValue</name>
      <anchor>a6</anchor>
      <arglist>(double _c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dominates</name>
      <anchor>a7</anchor>
      <arglist>(const eoParetoOneConstraintFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a8</anchor>
      <arglist>(const eoParetoOneConstraintFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchor>a9</anchor>
      <arglist>(const eoParetoOneConstraintFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(const eoParetoOneConstraintFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const eoParetoOneConstraintFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a12</anchor>
      <arglist>(const eoParetoOneConstraintFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a13</anchor>
      <arglist>(const eoParetoOneConstraintFitness&lt; FitnessTraits &gt; &amp;_other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setUp</name>
      <anchor>e0</anchor>
      <arglist>(unsigned _n, std::vector&lt; bool &gt; &amp;_b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>bool</type>
      <name>maximizing</name>
      <anchor>e1</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>constraintValue</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParetoRanking</name>
    <filename>classeo_pareto_ranking.html</filename>
    <templarg>EOT</templarg>
    <base>eoPerf2WorthCached&lt; EOT, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoParetoRanking</name>
      <anchor>a0</anchor>
      <arglist>(eoDominanceMap&lt; EOT &gt; &amp;_dominanceMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_worths</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoDominanceMap&lt; EOT &gt; &amp;</type>
      <name>dominanceMap</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParser</name>
    <filename>classeo_parser.html</filename>
    <base>eoParameterLoader</base>
    <base>eoObject</base>
    <base>eoPersistent</base>
    <member kind="function">
      <type></type>
      <name>eoParser</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _argc, char **_argv, std::string _programDescription=&quot;&quot;, std::string _lFileParamName=&quot;param-file&quot;, char _shortHand= &apos;p&apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processParam</name>
      <anchor>a1</anchor>
      <arglist>(eoParam &amp;param, std::string section=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a2</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>userNeedsHelp</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printHelp</name>
      <anchor>a6</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ProgramName</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isItThere</name>
      <anchor>a8</anchor>
      <arglist>(eoParam &amp;_param) const </arglist>
    </member>
    <member kind="function">
      <type>eoParam *</type>
      <name>getParamWithLongName</name>
      <anchor>a9</anchor>
      <arglist>(const std::string &amp;_name) const </arglist>
    </member>
    <member kind="function">
      <type>eoValueParam&lt; ValueType &gt; &amp;</type>
      <name>getORcreateParam</name>
      <anchor>a10</anchor>
      <arglist>(ValueType _defaultValue, std::string _longName, std::string _description, char _shortHand=0, std::string _section=&quot;&quot;, bool _required=false)</arglist>
    </member>
    <member kind="function">
      <type>eoValueParam&lt; ValueType &gt; &amp;</type>
      <name>setORcreateParam</name>
      <anchor>a11</anchor>
      <arglist>(ValueType _defaultValue, std::string _longName, std::string _description, char _shortHand=0, std::string _section=&quot;&quot;, bool _required=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStopOnUnknownParam</name>
      <anchor>a12</anchor>
      <arglist>(bool _b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStopOnUnknownParam</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrefix</name>
      <anchor>a14</anchor>
      <arglist>(const std::string &amp;_prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPrefix</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPrefix</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::multimap&lt; std::string, eoParam * &gt;</type>
      <name>MultiMapType</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; char, std::string &gt;</type>
      <name>ShortNameMapType</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>LongNameMapType</name>
      <anchor>y2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doRegisterParam</name>
      <anchor>d0</anchor>
      <arglist>(eoParam &amp;param) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; bool, std::string &gt;</type>
      <name>getValue</name>
      <anchor>d1</anchor>
      <arglist>(eoParam &amp;_param) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateParameters</name>
      <anchor>d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultiMapType</type>
      <name>params</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>programName</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>programDescription</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ShortNameMapType</type>
      <name>shortNameMap</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LongNameMapType</type>
      <name>longNameMap</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoValueParam&lt; bool &gt;</type>
      <name>needHelp</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoValueParam&lt; bool &gt;</type>
      <name>stopOnUnknownParam</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>messages</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>prefix</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParseTree</name>
    <filename>classeo_parse_tree.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>EO&lt; FType &gt;</base>
    <member kind="typedef">
      <type>parse_tree&lt; Node &gt;::subtree</type>
      <name>Subtree</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node</type>
      <name>reference</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const reference</type>
      <name>const_reference</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoParseTree</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoParseTree</name>
      <anchor>a1</anchor>
      <arglist>(const parse_tree&lt; Node &gt; &amp;tree)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pruneTree</name>
      <anchor>a2</anchor>
      <arglist>(unsigned _size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoParseTree</name>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a6</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoParseTreeDepthInit</name>
    <filename>classeo_parse_tree_depth_init.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoInit&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoParseTreeDepthInit</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _max_depth, const std::vector&lt; Node &gt; &amp;_initializor, bool _grow=true, bool _ramped_half_and_half=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EoType &amp;_tree)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generate</name>
      <anchor>d0</anchor>
      <arglist>(std::list&lt; Node &gt; &amp;sequence, int the_max, int last_terminal=-1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_depth</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node &gt;</type>
      <name>initializor</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>grow</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ramped_half_and_half</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>current_depth</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPBILAdditive</name>
    <filename>classeo_p_b_i_l_additive.html</filename>
    <templarg>EOT</templarg>
    <base>eoDistribUpdater</base>
    <member kind="function">
      <type></type>
      <name>eoPBILAdditive</name>
      <anchor>a0</anchor>
      <arglist>(double _LRBest, unsigned _nbBest=1, double _tolerance=0.0, double _LRWorst=0.0, unsigned _nbWorst=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoDistribution&lt; EOT &gt; &amp;_distrib, eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>maxBound</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>minBound</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LR</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nbBest</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nbWorst</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lrb</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lrw</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPBILDistrib</name>
    <filename>classeo_p_b_i_l_distrib.html</filename>
    <templarg>EOT</templarg>
    <base>eoDistribution</base>
    <base>eoValueParam&lt; std::vector&lt; double &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoPBILDistrib</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _genomeSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Size</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a4</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>genomeSize</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPBILOrg</name>
    <filename>classeo_p_b_i_l_org.html</filename>
    <templarg>EOT</templarg>
    <base>eoDistribUpdater</base>
    <member kind="function">
      <type></type>
      <name>eoPBILOrg</name>
      <anchor>a0</anchor>
      <arglist>(double _LR, double _tolerance=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoDistribution&lt; EOT &gt; &amp;_distrib, eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LR</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>maxBound</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>minBound</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPerf2Worth</name>
    <filename>classeo_perf2_worth.html</filename>
    <templarg>EOT</templarg>
    <templarg>WorthT</templarg>
    <base>eoUF&lt; const eoPop&lt; EOT &gt; &amp;, void &gt;</base>
    <base>eoValueParam&lt; std::vector&lt; WorthT &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoPerf2Worth</name>
      <anchor>a0</anchor>
      <arglist>(std::string _description=&quot;Worths&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sort_pop</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchor>a2</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop, unsigned sz)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPerf2Worth::compare_worth</name>
    <filename>classeo_perf2_worth_1_1compare__worth.html</filename>
    <member kind="function">
      <type></type>
      <name>compare_worth</name>
      <anchor>a0</anchor>
      <arglist>(const std::vector&lt; WorthT &gt; &amp;_worths)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(unsigned a, unsigned b) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; WorthT &gt; &amp;</type>
      <name>worths</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPerf2WorthCached</name>
    <filename>classeo_perf2_worth_cached.html</filename>
    <templarg>EOT</templarg>
    <templarg>WorthT</templarg>
    <base>eoPerf2Worth</base>
    <member kind="function">
      <type></type>
      <name>eoPerf2WorthCached</name>
      <anchor>a0</anchor>
      <arglist>(std::string _description=&quot;Worths&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calculate_worths</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sort_pop</name>
      <anchor>a3</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchor>a4</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop, unsigned sz)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; typename EOT::Fitness &gt;</type>
      <name>fitness_cache</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPerf2WorthCached::compare_worth</name>
    <filename>classeo_perf2_worth_cached_1_1compare__worth.html</filename>
    <member kind="function">
      <type></type>
      <name>compare_worth</name>
      <anchor>a0</anchor>
      <arglist>(const std::vector&lt; WorthT &gt; &amp;_worths)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(unsigned a, unsigned b) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; WorthT &gt; &amp;</type>
      <name>worths</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPersistent</name>
    <filename>classeo_persistent.html</filename>
    <base>eoPrintable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoPersistent</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a1</anchor>
      <arglist>(std::istream &amp;_is)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPlus</name>
    <filename>classeo_plus.html</filename>
    <templarg>EOT</templarg>
    <base>eoMerge&lt; EOT &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPlusReplacement</name>
    <filename>classeo_plus_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoMergeReduce</base>
    <member kind="variable" protection="private">
      <type>eoPlus&lt; EOT &gt;</type>
      <name>plus</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoTruncate&lt; EOT &gt;</type>
      <name>truncate</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPointMutation</name>
    <filename>classeo_point_mutation.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoMonOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoPointMutation</name>
      <anchor>a0</anchor>
      <arglist>(std::vector&lt; Node &gt; &amp;_initializor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoPointMutation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node &gt; &amp;</type>
      <name>initializor</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPop</name>
    <filename>classeo_pop.html</filename>
    <templarg>EOT</templarg>
    <base>eoObject</base>
    <base>eoPersistent</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EOT::fitness_traits</type>
      <name>fitness_traits</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoPop</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoPop</name>
      <anchor>a1</anchor>
      <arglist>(unsigned _popSize, eoInit&lt; EOT &gt; &amp;_chromInit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(unsigned _newPopSize, eoInit&lt; EOT &gt; &amp;_chromInit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoPop</name>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoPop</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchor>a6</anchor>
      <arglist>(std::vector&lt; const EOT * &gt; &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffle</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffle</name>
      <anchor>a8</anchor>
      <arglist>(std::vector&lt; const EOT * &gt; &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>eoPop&lt; EOT &gt;::iterator</type>
      <name>it_best_element</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EOT &amp;</type>
      <name>best_element</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EOT &amp;</type>
      <name>worse_element</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>eoPop&lt; EOT &gt;::iterator</type>
      <name>it_worse_element</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>eoPop&lt; EOT &gt;::iterator</type>
      <name>nth_element</name>
      <anchor>a13</anchor>
      <arglist>(int nth)</arglist>
    </member>
    <member kind="function">
      <type>Fitness</type>
      <name>nth_element_fitness</name>
      <anchor>a14</anchor>
      <arglist>(int which) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nth_element</name>
      <anchor>a15</anchor>
      <arglist>(int which, std::vector&lt; const EOT * &gt; &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchor>a16</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sortedPrintOn</name>
      <anchor>a17</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a18</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerf2Worth</name>
      <anchor>a23</anchor>
      <arglist>(eoPerf2Worth&lt; EOT &gt; &amp;_p2w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerf2Worth</name>
      <anchor>a24</anchor>
      <arglist>(eoPerf2Worth&lt; EOT &gt; *_p2w)</arglist>
    </member>
    <member kind="function">
      <type>eoPerf2Worth&lt; EOT &gt; *</type>
      <name>getPerf2Worth</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchor>a26</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>z19_0</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>z19_1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPerf2Worth&lt; EOT &gt; *</type>
      <name>p2w</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>eoPop::Cmp</name>
    <filename>structeo_pop_1_1_cmp.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const EOT *a, const EOT *b) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>eoPop::Ref</name>
    <filename>structeo_pop_1_1_ref.html</filename>
    <member kind="function">
      <type>const EOT *</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const EOT &amp;eot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPopAlgo</name>
    <filename>classeo_pop_algo.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; eoPop&lt; EOT &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoPopEvalFunc</name>
    <filename>classeo_pop_eval_func.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; eoPop&lt; EOT &gt; &amp;, eoPop&lt; EOT &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoPopLoopEval</name>
    <filename>classeo_pop_loop_eval.html</filename>
    <templarg>EOT</templarg>
    <base>eoPopEvalFunc</base>
    <member kind="function">
      <type></type>
      <name>eoPopLoopEval</name>
      <anchor>a0</anchor>
      <arglist>(eoEvalFunc&lt; EOT &gt; &amp;_eval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>eval</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPopStat</name>
    <filename>classeo_pop_stat.html</filename>
    <templarg>EOT</templarg>
    <base>eoStat&lt; EOT, std::string &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoPopStat</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _howMany=0, std::string _desc=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>combien</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPopulator</name>
    <filename>classeo_populator.html</filename>
    <templarg>EOT</templarg>
    <member kind="typedef">
      <type>unsigned</type>
      <name>position_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoPopulator</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_src, eoPop&lt; EOT &gt; &amp;_dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoPopulator</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EOT &amp;</type>
      <name>operator *</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>eoPopulator &amp;</type>
      <name>operator++</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchor>a4</anchor>
      <arglist>(const EOT &amp;_eo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchor>a5</anchor>
      <arglist>(int how_many)</arglist>
    </member>
    <member kind="function">
      <type>const eoPop&lt; EOT &gt; &amp;</type>
      <name>source</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>eoPop&lt; EOT &gt; &amp;</type>
      <name>offspring</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>position_type</type>
      <name>tellp</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekp</name>
      <anchor>a9</anchor>
      <arglist>(position_type pos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exhausted</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const EOT &amp;</type>
      <name>select</name>
      <anchor>a11</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoPop&lt; EOT &gt; &amp;</type>
      <name>dest</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoPop&lt; EOT &gt;::iterator</type>
      <name>current</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const eoPop&lt; EOT &gt; &amp;</type>
      <name>src</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>get_next</name>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPrintable</name>
    <filename>classeo_printable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoPrintable</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;_os) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoProcedureCounter</name>
    <filename>classeo_procedure_counter.html</filename>
    <templarg>Procedure</templarg>
    <base>eoValueParam&lt; unsigned long &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoProcedureCounter</name>
      <anchor>a0</anchor>
      <arglist>(Procedure &amp;_proc, std::string _name=&quot;proc_counter&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Procedure::result_type</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Procedure &amp;</type>
      <name>proc</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPropCombinedBinOp</name>
    <filename>classeo_prop_combined_bin_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoPropCombinedBinOp</name>
      <anchor>a0</anchor>
      <arglist>(eoBinOp&lt; EOT &gt; &amp;_first, const double _rate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(eoBinOp&lt; EOT &gt; &amp;_op, const double _rate, bool _verbose=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EOT &amp;_indi1, const EOT &amp;_indi2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoBinOp&lt; EOT &gt; * &gt;</type>
      <name>ops</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>rates</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPropCombinedMonOp</name>
    <filename>classeo_prop_combined_mon_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoPropCombinedMonOp</name>
      <anchor>a0</anchor>
      <arglist>(eoMonOp&lt; EOT &gt; &amp;_first, const double _rate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(eoMonOp&lt; EOT &gt; &amp;_op, const double _rate, bool _verbose=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;_os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a4</anchor>
      <arglist>(EOT &amp;_indi)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; eoMonOp&lt; EOT &gt; * &gt;</type>
      <name>ops</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>rates</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPropCombinedQuadOp</name>
    <filename>classeo_prop_combined_quad_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoPropCombinedQuadOp</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; EOT &gt; &amp;_first, const double _rate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(eoQuadOp&lt; EOT &gt; &amp;_op, const double _rate, bool _verbose=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;_os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a4</anchor>
      <arglist>(EOT &amp;_indi1, EOT &amp;_indi2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoQuadOp&lt; EOT &gt; * &gt;</type>
      <name>ops</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>rates</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoPropGAGenOp</name>
    <filename>classeo_prop_g_a_gen_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoGenOp</base>
    <member kind="function">
      <type></type>
      <name>eoPropGAGenOp</name>
      <anchor>a0</anchor>
      <arglist>(double _wClone, eoQuadOp&lt; EOT &gt; &amp;_cross, double _wCross, eoMonOp&lt; EOT &gt; &amp;_mut, double _wMut)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a1</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>max_production</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>wClone</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoQuadOp&lt; EOT &gt; &amp;</type>
      <name>cross</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>wCross</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonOp&lt; EOT &gt; &amp;</type>
      <name>mut</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>wMut</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoProportionalOp&lt; EOT &gt;</type>
      <name>propOp</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonCloneOp&lt; EOT &gt;</type>
      <name>monClone</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoProportionalOp</name>
    <filename>classeo_proportional_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoOpContainer</base>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchor>a0</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoProportionalSelect</name>
    <filename>classeo_proportional_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoProportionalSelect</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;pop=eoPop&lt; EOT &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function">
      <type>const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; typename EOT::Fitness &gt;</type>
      <name>FitVec</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FitVec</type>
      <name>cumulative</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoQuad2BinOp</name>
    <filename>classeo_quad2_bin_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoQuad2BinOp</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; EOT &gt; &amp;_quadOp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, const EOT &amp;_eo2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoQuadOp&lt; EOT &gt; &amp;</type>
      <name>quadOp</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoQuadCloneOp</name>
    <filename>classeo_quad_clone_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoQuadCloneOp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EOT &amp;, EOT &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoQuadDistance</name>
    <filename>classeo_quad_distance.html</filename>
    <templarg>EOT</templarg>
    <base>eoDistance</base>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const EOT &amp;_v1, const EOT &amp;_v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoQuadGenOp</name>
    <filename>classeo_quad_gen_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoGenOp</base>
    <member kind="function">
      <type></type>
      <name>eoQuadGenOp</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; EOT &gt; &amp;_op)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_production</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoQuadOp&lt; EOT &gt; &amp;</type>
      <name>op</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoQuadOp</name>
    <filename>classeo_quad_op.html</filename>
    <templarg>EOType</templarg>
    <base>eoOp</base>
    <base>eoBF&lt; EOType &amp;, EOType &amp;, bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoQuadOp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>random_generator</name>
    <filename>classrandom__generator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>random_generator</name>
      <anchor>a0</anchor>
      <arglist>(T _max, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>random_generator</name>
      <anchor>a1</anchor>
      <arglist>(T _min, T _max, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>minim</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>range</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>random</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomNodeSelector</name>
    <filename>class_random_node_selector.html</filename>
    <base>NodeSelector</base>
    <member kind="function">
      <type>NodeSelection</type>
      <name>select_node</name>
      <anchor>a0</anchor>
      <arglist>(Sym sym) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRandomReduce</name>
    <filename>classeo_random_reduce.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduce</base>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator()</name>
      <anchor>d0</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, unsigned _newsize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRandomSelect</name>
    <filename>classeo_random_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRandomSplit</name>
    <filename>classeo_random_split.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduceSplit</base>
    <member kind="function">
      <type></type>
      <name>eoRandomSplit</name>
      <anchor>a0</anchor>
      <arglist>(eoHowMany _howMany, bool _returnEliminated=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, eoPop&lt; EOT &gt; &amp;_eliminated)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>returnEliminated</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRanking</name>
    <filename>classeo_ranking.html</filename>
    <templarg>EOT</templarg>
    <base>eoPerf2Worth&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoRanking</name>
      <anchor>a0</anchor>
      <arglist>(double _p=2.0, double _e=1.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookfor</name>
      <anchor>a1</anchor>
      <arglist>(const EOT *_eo, const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>pressure</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>exponent</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRankingSelect</name>
    <filename>classeo_ranking_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoRouletteWorthSelect&lt; EOT, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoRankingSelect</name>
      <anchor>a0</anchor>
      <arglist>(double _p=2.0, double _e=1.0)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRanking&lt; EOT &gt;</type>
      <name>ranking</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoReal</name>
    <filename>classeo_real.html</filename>
    <templarg>FitT</templarg>
    <base>eoVector&lt; FitT, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoReal</name>
      <anchor>a0</anchor>
      <arglist>(unsigned size=0, double value=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRealAboveBound</name>
    <filename>classeo_real_above_bound.html</filename>
    <base>eoRealBounds</base>
    <member kind="function">
      <type></type>
      <name>eoRealAboveBound</name>
      <anchor>a1</anchor>
      <arglist>(double _max=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>maximum</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minimum</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>range</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a5</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a10</anchor>
      <arglist>(double _r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a11</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a12</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a13</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a14</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoRealBounds *</type>
      <name>dup</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>repMaximum</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRealBaseVectorBounds</name>
    <filename>classeo_real_base_vector_bounds.html</filename>
    <member kind="function">
      <type></type>
      <name>eoRealBaseVectorBounds</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoRealBaseVectorBounds</name>
      <anchor>a2</anchor>
      <arglist>(unsigned _dim, eoRealBounds &amp;_bounds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoRealBaseVectorBounds</name>
      <anchor>a3</anchor>
      <arglist>(eoRealBounds &amp;_xbounds, eoRealBounds &amp;_ybounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a4</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a6</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a8</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a9</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a10</anchor>
      <arglist>(unsigned _i, double &amp;_r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a11</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;_v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a12</anchor>
      <arglist>(unsigned _i, double &amp;_r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a13</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;_v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a14</anchor>
      <arglist>(unsigned _i, double _r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a15</anchor>
      <arglist>(std::vector&lt; double &gt; _v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minimum</name>
      <anchor>a16</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>maximum</name>
      <anchor>a17</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>range</name>
      <anchor>a18</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>averageRange</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a20</anchor>
      <arglist>(unsigned _i, eoRng &amp;_rng=eo::rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchor>a21</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;_v, eoRng &amp;_rng=eo::rng)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a22</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRealBelowBound</name>
    <filename>classeo_real_below_bound.html</filename>
    <base>eoRealBounds</base>
    <member kind="function">
      <type></type>
      <name>eoRealBelowBound</name>
      <anchor>a1</anchor>
      <arglist>(double _min=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minimum</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>maximum</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>range</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a5</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a10</anchor>
      <arglist>(double _r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a11</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a12</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a13</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a14</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoRealBounds *</type>
      <name>dup</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>repMinimum</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRealBounds</name>
    <filename>classeo_real_bounds.html</filename>
    <base>eoPersistent</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a1</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a2</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a3</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a4</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a5</anchor>
      <arglist>(double) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a6</anchor>
      <arglist>(double &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a7</anchor>
      <arglist>(double &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>minimum</name>
      <anchor>a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>maximum</name>
      <anchor>a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>range</name>
      <anchor>a10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a11</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual eoRealBounds *</type>
      <name>dup</name>
      <anchor>a12</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRealInitBounded</name>
    <filename>classeo_real_init_bounded.html</filename>
    <templarg>EOT</templarg>
    <base>eoInit</base>
    <member kind="function">
      <type></type>
      <name>eoRealInitBounded</name>
      <anchor>a0</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoRealVectorBounds &amp;</type>
      <name>theBounds</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>size</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRealVectorBounds &amp;</type>
      <name>bounds</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRealInterval</name>
    <filename>classeo_real_interval.html</filename>
    <base>eoRealBounds</base>
    <member kind="function">
      <type></type>
      <name>eoRealInterval</name>
      <anchor>a1</anchor>
      <arglist>(double _min=0, double _max=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minimum</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>maximum</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>range</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a9</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a10</anchor>
      <arglist>(double _r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a11</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a12</anchor>
      <arglist>(double &amp;_r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a13</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a14</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoRealBounds *</type>
      <name>dup</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>repMinimum</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>repMaximum</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>repRange</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRealNoBounds</name>
    <filename>classeo_real_no_bounds.html</filename>
    <base>eoRealBounds</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a5</anchor>
      <arglist>(double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a6</anchor>
      <arglist>(double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a7</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minimum</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>maximum</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>range</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a11</anchor>
      <arglist>(eoRng &amp;_rng=eo::rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a12</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a13</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eoRealBounds *</type>
      <name>dup</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRealUxOver</name>
    <filename>classeo_real_ux_over.html</filename>
  </compound>
  <compound kind="class">
    <name>eoRealVectorBounds</name>
    <filename>classeo_real_vector_bounds.html</filename>
    <base>eoRealBaseVectorBounds</base>
    <base>eoPersistent</base>
    <member kind="function">
      <type></type>
      <name>eoRealVectorBounds</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoRealVectorBounds</name>
      <anchor>a1</anchor>
      <arglist>(unsigned _dim, eoRealBounds &amp;_bounds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoRealVectorBounds</name>
      <anchor>a2</anchor>
      <arglist>(eoRealBounds &amp;_xbounds, eoRealBounds &amp;_ybounds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoRealVectorBounds</name>
      <anchor>a3</anchor>
      <arglist>(unsigned _dim, double _min, double _max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoRealVectorBounds</name>
      <anchor>a4</anchor>
      <arglist>(std::vector&lt; double &gt; _min, std::vector&lt; double &gt; _max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoRealVectorBounds</name>
      <anchor>a5</anchor>
      <arglist>(std::string _s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoRealVectorBounds</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a7</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a8</anchor>
      <arglist>(std::string _s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a9</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjust_size</name>
      <anchor>a10</anchor>
      <arglist>(unsigned _dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoRealVectorBounds</name>
      <anchor>a11</anchor>
      <arglist>(const eoRealVectorBounds &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>eoRealVectorBounds &amp;</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const eoRealVectorBounds &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>factor</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoRealBounds * &gt;</type>
      <name>ownedBounds</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRealVectorNoBounds</name>
    <filename>classeo_real_vector_no_bounds.html</filename>
    <base>eoRealVectorBounds</base>
    <member kind="function">
      <type></type>
      <name>eoRealVectorNoBounds</name>
      <anchor>a1</anchor>
      <arglist>(unsigned _dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a2</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a4</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNoBoundAtAll</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMinBounded</name>
      <anchor>a6</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMaxBounded</name>
      <anchor>a7</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a8</anchor>
      <arglist>(unsigned, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>foldsInBounds</name>
      <anchor>a9</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a10</anchor>
      <arglist>(unsigned, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>truncate</name>
      <anchor>a11</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a12</anchor>
      <arglist>(unsigned, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInBounds</name>
      <anchor>a13</anchor>
      <arglist>(std::vector&lt; double &gt;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minimum</name>
      <anchor>a14</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>maximum</name>
      <anchor>a15</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>range</name>
      <anchor>a16</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>averageRange</name>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchor>a18</anchor>
      <arglist>(unsigned, eoRng &amp;_rng=eo::rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchor>a19</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;, eoRng &amp;_rng=eo::rng)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoReduce</name>
    <filename>classeo_reduce.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; eoPop&lt; EOT &gt; &amp;, unsigned, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoReduceMerge</name>
    <filename>classeo_reduce_merge.html</filename>
    <templarg>EOT</templarg>
    <base>eoReplacement</base>
    <member kind="function">
      <type></type>
      <name>eoReduceMerge</name>
      <anchor>a0</anchor>
      <arglist>(eoReduce&lt; EOT &gt; &amp;_reduce, eoMerge&lt; EOT &gt; &amp;_merge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoReduce&lt; EOT &gt; &amp;</type>
      <name>reduce</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMerge&lt; EOT &gt; &amp;</type>
      <name>merge</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoReduceMergeReduce</name>
    <filename>classeo_reduce_merge_reduce.html</filename>
    <templarg>EOT</templarg>
    <base>eoReplacement</base>
    <member kind="function">
      <type></type>
      <name>eoReduceMergeReduce</name>
      <anchor>a0</anchor>
      <arglist>(eoHowMany _howManyElite, bool _strongElitism, eoHowMany _howManyReducedParents, eoReduce&lt; EOT &gt; &amp;_reduceParents, eoHowMany _howManyReducedOffspring, eoReduce&lt; EOT &gt; &amp;_reduceOffspring, eoReduce&lt; EOT &gt; &amp;_reduceFinal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howManyElite</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>strongElitism</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howManyReducedParents</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howManyReducedOffspring</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoReduce&lt; EOT &gt; &amp;</type>
      <name>reduceParents</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoReduce&lt; EOT &gt; &amp;</type>
      <name>reduceOffspring</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoReduce&lt; EOT &gt; &amp;</type>
      <name>reduceFinal</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoReduceSplit</name>
    <filename>classeo_reduce_split.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; eoPop&lt; EOT &gt; &amp;, eoPop&lt; EOT &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoReplacement</name>
    <filename>classeo_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; eoPop&lt; EOT &gt; &amp;, eoPop&lt; EOT &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoRndGenerator</name>
    <filename>classeo_rnd_generator.html</filename>
    <templarg>T</templarg>
    <base>eoF&lt; T &gt;</base>
    <member kind="typedef" protection="private">
      <type>T</type>
      <name>AtomType</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRng</name>
    <filename>classeo_rng.html</filename>
    <base>eoObject</base>
    <base>eoPersistent</base>
    <member kind="function">
      <type></type>
      <name>eoRng</name>
      <anchor>a0</anchor>
      <arglist>(uint32_t s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reseed</name>
      <anchor>a2</anchor>
      <arglist>(uint32_t s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oldReseed</name>
      <anchor>a3</anchor>
      <arglist>(uint32_t s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniform</name>
      <anchor>a4</anchor>
      <arglist>(double m=1.0)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>random</name>
      <anchor>a5</anchor>
      <arglist>(uint32_t m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flip</name>
      <anchor>a6</anchor>
      <arglist>(float bias=0.5)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normal</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normal</name>
      <anchor>a8</anchor>
      <arglist>(double stdev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normal</name>
      <anchor>a9</anchor>
      <arglist>(double mean, double stdev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>negexp</name>
      <anchor>a10</anchor>
      <arglist>(double mean)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>rand</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>rand_max</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>roulette_wheel</name>
      <anchor>a13</anchor>
      <arglist>(const std::vector&lt; TYPE &gt; &amp;vec, TYPE total=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>choice</name>
      <anchor>a14</anchor>
      <arglist>(const std::vector&lt; TYPE &gt; &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>choice</name>
      <anchor>a15</anchor>
      <arglist>(std::vector&lt; TYPE &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>a16</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>a17</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>uint32_t</type>
      <name>restart</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchor>d1</anchor>
      <arglist>(uint32_t seed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>eoRng</name>
      <anchor>d2</anchor>
      <arglist>(const eoRng &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>eoRng &amp;</type>
      <name>operator=</name>
      <anchor>d3</anchor>
      <arglist>(const eoRng &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t *</type>
      <name>state</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t *</type>
      <name>next</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>left</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>cached</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>cacheValue</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>N</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>M</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const uint32_t</type>
      <name>K</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoRouletteWorthSelect</name>
    <filename>classeo_roulette_worth_select.html</filename>
    <templarg>EOT</templarg>
    <templarg>WorthT</templarg>
    <base>eoSelectFromWorth&lt; EOT, WorthT &gt;</base>
    <member kind="typedef">
      <type>std::vector&lt; WorthT &gt;::iterator</type>
      <name>worthIterator</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoRouletteWorthSelect</name>
      <anchor>a0</anchor>
      <arglist>(eoPerf2Worth&lt; EOT, WorthT &gt; &amp;_perf2Worth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>total</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoScalarFitness</name>
    <filename>classeo_scalar_fitness.html</filename>
    <templarg>ScalarType</templarg>
    <templarg>Compare</templarg>
    <member kind="function">
      <type></type>
      <name>eoScalarFitness</name>
      <anchor>a1</anchor>
      <arglist>(const eoScalarFitness &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoScalarFitness</name>
      <anchor>a2</anchor>
      <arglist>(const ScalarType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>eoScalarFitness &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const eoScalarFitness &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eoScalarFitness &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const ScalarType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ScalarType</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a6</anchor>
      <arglist>(const eoScalarFitness &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchor>a7</anchor>
      <arglist>(const eoScalarFitness&lt; ScalarType, Compare &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(const eoScalarFitness&lt; ScalarType, Compare &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const eoScalarFitness&lt; ScalarType, Compare &gt; &amp;y) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ScalarType</type>
      <name>value</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoScalarFitnessAssembled</name>
    <filename>classeo_scalar_fitness_assembled.html</filename>
    <templarg>ScalarType</templarg>
    <templarg>Compare</templarg>
    <templarg>FitnessTraits</templarg>
    <member kind="typedef">
      <type>std::vector&lt; ScalarType &gt;</type>
      <name>baseVector</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>baseVector::size_type</type>
      <name>size_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoScalarFitnessAssembled</name>
      <anchor>a1</anchor>
      <arglist>(size_type _n, const ScalarType &amp;_val, const std::string &amp;_descr=&quot;Unnamed variable&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoScalarFitnessAssembled</name>
      <anchor>a2</anchor>
      <arglist>(const eoScalarFitnessAssembled &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eoScalarFitnessAssembled &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const eoScalarFitnessAssembled &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoScalarFitnessAssembled</name>
      <anchor>a4</anchor>
      <arglist>(const ScalarType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>eoScalarFitnessAssembled &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const ScalarType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchor>a6</anchor>
      <arglist>(const ScalarType &amp;_val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchor>a7</anchor>
      <arglist>(const ScalarType &amp;_val, const std::string &amp;_descr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchor>a8</anchor>
      <arglist>(size_type _n, const ScalarType &amp;_val=ScalarType(), const std::string &amp;_descr=&quot;Unnamed variable&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDescription</name>
      <anchor>a9</anchor>
      <arglist>(size_type _idx, std::string _descr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescription</name>
      <anchor>a10</anchor>
      <arglist>(size_type _idx)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getDescriptionVector</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ScalarType</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAll</name>
      <anchor>a13</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a14</anchor>
      <arglist>(const eoScalarFitnessAssembled &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchor>a15</anchor>
      <arglist>(const eoScalarFitnessAssembled&lt; ScalarType, Compare, FitnessTraits &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(const eoScalarFitnessAssembled&lt; ScalarType, Compare, FitnessTraits &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const eoScalarFitnessAssembled&lt; ScalarType, Compare, FitnessTraits &gt; &amp;y) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>feasible</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>failed</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msg</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoScalarFitnessAssembledTraits</name>
    <filename>classeo_scalar_fitness_assembled_traits.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;::size_type</type>
      <name>size_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setDescription</name>
      <anchor>e0</anchor>
      <arglist>(size_type _idx, std::string _descr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>std::string</type>
      <name>getDescription</name>
      <anchor>e1</anchor>
      <arglist>(size_type _idx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>resize</name>
      <anchor>e2</anchor>
      <arglist>(size_type _n, const std::string &amp;_descr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_type</type>
      <name>size</name>
      <anchor>e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getDescriptionVector</name>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>std::vector&lt; std::string &gt;</type>
      <name>TermDescriptions</name>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoScalarFitnessStat</name>
    <filename>classeo_scalar_fitness_stat.html</filename>
    <templarg>EOT</templarg>
    <templarg>FitT</templarg>
    <base>eoSortedStat&lt; EOT, std::vector&lt; double &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoScalarFitnessStat</name>
      <anchor>a0</anchor>
      <arglist>(std::string _description=&quot;FitnessES&quot;, eoRealVectorBounds &amp;_bounds=eoDummyVectorNoBounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const std::vector&lt; const EOT * &gt; &amp;_popPters)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRealBounds &amp;</type>
      <name>range</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSecondMomentStats</name>
    <filename>classeo_second_moment_stats.html</filename>
    <templarg>EOT</templarg>
    <base>eoStat&lt; EOT, std::pair&lt; double, double &gt; &gt;</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>fitness_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; double, double &gt;</type>
      <name>SquarePair</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoSecondMomentStats</name>
      <anchor>a0</anchor>
      <arglist>(std::string _description=&quot;Average &amp; Stdev&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>SquarePair</type>
      <name>sumOfSquares</name>
      <anchor>e0</anchor>
      <arglist>(SquarePair _sq, const EOT &amp;_eo)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSegmentCrossover</name>
    <filename>classeo_segment_crossover.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoSegmentCrossover</name>
      <anchor>a0</anchor>
      <arglist>(const double &amp;_alpha=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoSegmentCrossover</name>
      <anchor>a1</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds, const double &amp;_alpha=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EOT &amp;_eo1, EOT &amp;_eo2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoRealVectorBounds &amp;</type>
      <name>bounds</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>range</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSelBinGenOp</name>
    <filename>classeo_sel_bin_gen_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoGenOp</base>
    <member kind="function">
      <type></type>
      <name>eoSelBinGenOp</name>
      <anchor>a0</anchor>
      <arglist>(eoBinOp&lt; EOT &gt; &amp;_op, eoSelectOne&lt; EOT &gt; &amp;_sel)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_production</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBinOp&lt; EOT &gt; &amp;</type>
      <name>op</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>sel</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSelect</name>
    <filename>classeo_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; const eoPop&lt; EOT &gt; &amp;, eoPop&lt; EOT &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoSelectFactory</name>
    <filename>classeo_select_factory.html</filename>
    <templarg>EOT</templarg>
    <base>eoFactory&lt; eoSelect&lt; EOT &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual eoSelect&lt; EOT &gt; *</type>
      <name>make</name>
      <anchor>a0</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoSelectFactory</name>
      <anchor>z20_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoSelectFactory</name>
      <anchor>z20_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printOn</name>
      <anchor>z22_0</anchor>
      <arglist>(std::ostream &amp;_os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFrom</name>
      <anchor>z22_1</anchor>
      <arglist>(std::istream &amp;_is)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSelectFromWorth</name>
    <filename>classeo_select_from_worth.html</filename>
    <templarg>EOT</templarg>
    <templarg>WorthType</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoSelectFromWorth</name>
      <anchor>a0</anchor>
      <arglist>(eoPerf2Worth&lt; EOT, WorthType &gt; &amp;_perf2Worth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;pop)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_sync</name>
      <anchor>b0</anchor>
      <arglist>(unsigned index, const EOT &amp;_eo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoPerf2Worth&lt; EOT, WorthType &gt; &amp;</type>
      <name>perf2Worth</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; typename EOT::Fitness &gt;</type>
      <name>fitness</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSelectivePopulator</name>
    <filename>classeo_selective_populator.html</filename>
    <templarg>EOT</templarg>
    <base>eoPopulator</base>
    <member kind="function">
      <type></type>
      <name>eoSelectivePopulator</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop, eoPop&lt; EOT &gt; &amp;_dest, eoSelectOne&lt; EOT &gt; &amp;_sel)</arglist>
    </member>
    <member kind="function">
      <type>const EOT &amp;</type>
      <name>select</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>sel</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSelectMany</name>
    <filename>classeo_select_many.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelect</base>
    <member kind="function">
      <type></type>
      <name>eoSelectMany</name>
      <anchor>a0</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, double _rate, bool _interpret_as_rate=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoSelectMany</name>
      <anchor>a1</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, eoHowMany _howMany)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_source, eoPop&lt; EOT &gt; &amp;_dest)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>select</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSelectNumber</name>
    <filename>classeo_select_number.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelect</base>
    <member kind="function">
      <type></type>
      <name>eoSelectNumber</name>
      <anchor>a0</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, unsigned _nb_to_select=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_source, eoPop&lt; EOT &gt; &amp;_dest)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>select</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nb_to_select</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSelectOne</name>
    <filename>classeo_select_one.html</filename>
    <templarg>EOT</templarg>
    <templarg>WorthT</templarg>
    <base>eoUF&lt; const eoPop&lt; EOT &gt; &amp;, const EOT &amp; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSelectPerc</name>
    <filename>classeo_select_perc.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelect</base>
    <member kind="function">
      <type></type>
      <name>eoSelectPerc</name>
      <anchor>a0</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, float _rate=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_source, eoPop&lt; EOT &gt; &amp;_dest)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>select</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>rate</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSelectTransform</name>
    <filename>classeo_select_transform.html</filename>
    <templarg>EOT</templarg>
    <base>eoBreed</base>
    <member kind="function">
      <type></type>
      <name>eoSelectTransform</name>
      <anchor>a0</anchor>
      <arglist>(eoSelect&lt; EOT &gt; &amp;_select, eoTransform&lt; EOT &gt; &amp;_transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelect&lt; EOT &gt; &amp;</type>
      <name>select</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoTransform&lt; EOT &gt; &amp;</type>
      <name>transform</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSeqPopulator</name>
    <filename>classeo_seq_populator.html</filename>
    <templarg>EOT</templarg>
    <base>eoPopulator</base>
    <member kind="function">
      <type></type>
      <name>eoSeqPopulator</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop, eoPop&lt; EOT &gt; &amp;_dest)</arglist>
    </member>
    <member kind="function">
      <type>const EOT &amp;</type>
      <name>select</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>current</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSequentialOp</name>
    <filename>classeo_sequential_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoOpContainer</base>
    <member kind="typedef">
      <type>unsigned</type>
      <name>position_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchor>a0</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_t &gt;</type>
      <name>to_apply</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_t &gt;</type>
      <name>production</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSequentialSelect</name>
    <filename>classeo_sequential_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoSequentialSelect</name>
      <anchor>a0</anchor>
      <arglist>(bool _ordered=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ordered</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>current</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const EOT * &gt;</type>
      <name>eoPters</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSGA</name>
    <filename>classeo_s_g_a.html</filename>
    <templarg>EOT</templarg>
    <base>eoAlgo</base>
    <member kind="function">
      <type></type>
      <name>eoSGA</name>
      <anchor>a0</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, eoQuadOp&lt; EOT &gt; &amp;_cross, float _crate, eoMonOp&lt; EOT &gt; &amp;_mutate, float _mrate, eoEvalFunc&lt; EOT &gt; &amp;_eval, eoContinue&lt; EOT &gt; &amp;_cont)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoContinue&lt; EOT &gt; &amp;</type>
      <name>cont</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInvalidateMonOp&lt; EOT &gt;</type>
      <name>mutate</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>mutationRate</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInvalidateQuadOp&lt; EOT &gt;</type>
      <name>cross</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>crossoverRate</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectPerc&lt; EOT &gt;</type>
      <name>select</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>eval</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSGAGenOp</name>
    <filename>classeo_s_g_a_gen_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoGenOp</base>
    <member kind="function">
      <type></type>
      <name>eoSGAGenOp</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; EOT &gt; &amp;_cross, double _pCross, eoMonOp&lt; EOT &gt; &amp;_mut, double _pMut)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a1</anchor>
      <arglist>(eoPopulator&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>max_production</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoQuadOp&lt; EOT &gt; &amp;</type>
      <name>cross</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>pCross</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonOp&lt; EOT &gt; &amp;</type>
      <name>mut</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>pMut</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoProportionalOp&lt; EOT &gt;</type>
      <name>propOp</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoQuadCloneOp&lt; EOT &gt;</type>
      <name>quadClone</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSequentialOp&lt; EOT &gt;</type>
      <name>op</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSGATransform</name>
    <filename>classeo_s_g_a_transform.html</filename>
    <templarg>EOT</templarg>
    <base>eoTransform</base>
    <member kind="function">
      <type></type>
      <name>eoSGATransform</name>
      <anchor>a0</anchor>
      <arglist>(eoQuadOp&lt; EOT &gt; &amp;_cross, double _cProba, eoMonOp&lt; EOT &gt; &amp;_mutate, double _mProba)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInvalidateQuadOp&lt; EOT &gt;</type>
      <name>cross</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>crossoverProba</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInvalidateMonOp&lt; EOT &gt;</type>
      <name>mutate</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mutationProba</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSharing</name>
    <filename>classeo_sharing.html</filename>
    <templarg>EOT</templarg>
    <base>eoPerf2Worth&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoSharing</name>
      <anchor>a0</anchor>
      <arglist>(double _nicheSize, eoDistance&lt; EOT &gt; &amp;_dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>nicheSize</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoDistance&lt; EOT &gt; &amp;</type>
      <name>dist</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSharingSelect</name>
    <filename>classeo_sharing_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoRouletteWorthSelect&lt; EOT, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoSharingSelect</name>
      <anchor>a0</anchor>
      <arglist>(double _sigma, eoDistance&lt; EOT &gt; &amp;_dist)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSharing&lt; EOT &gt;</type>
      <name>sharing</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSimpleEDA</name>
    <filename>classeo_simple_e_d_a.html</filename>
    <templarg>EOT</templarg>
    <base>eoEDA</base>
    <member kind="function">
      <type></type>
      <name>eoSimpleEDA</name>
      <anchor>a0</anchor>
      <arglist>(eoDistribUpdater&lt; EOT &gt; &amp;_update, eoEvalFunc&lt; EOT &gt; &amp;_eval, unsigned _popSize, eoContinue&lt; EOT &gt; &amp;_continuator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoDistribution&lt; EOT &gt; &amp;_distrib)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoDistribUpdater&lt; EOT &gt; &amp;</type>
      <name>update</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>eval</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>popSize</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoContinue&lt; EOT &gt; &amp;</type>
      <name>continuator</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSortedPopStat</name>
    <filename>classeo_sorted_pop_stat.html</filename>
    <templarg>EOT</templarg>
    <base>eoSortedStat&lt; EOT, std::string &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoSortedPopStat</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _howMany=0, std::string _desc=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const std::vector&lt; const EOT * &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>combien</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSortedStat</name>
    <filename>classeo_sorted_stat.html</filename>
    <templarg>EOT</templarg>
    <templarg>ParamType</templarg>
    <base>eoSortedStatBase</base>
    <base>eoValueParam&lt; ParamType &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoSortedStat</name>
      <anchor>a0</anchor>
      <arglist>(ParamType _value, std::string _desc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSortedStatBase</name>
    <filename>classeo_sorted_stat_base.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; const std::vector&lt; const EOT * &gt; &amp;, void &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lastCall</name>
      <anchor>a0</anchor>
      <arglist>(const std::vector&lt; const EOT * &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSSGADetTournamentReplacement</name>
    <filename>classeo_s_s_g_a_det_tournament_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduceMerge</base>
    <member kind="function">
      <type></type>
      <name>eoSSGADetTournamentReplacement</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _t_size)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoDetTournamentTruncate&lt; EOT &gt;</type>
      <name>truncate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPlus&lt; EOT &gt;</type>
      <name>plus</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSSGAStochTournamentReplacement</name>
    <filename>classeo_s_s_g_a_stoch_tournament_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduceMerge</base>
    <member kind="function">
      <type></type>
      <name>eoSSGAStochTournamentReplacement</name>
      <anchor>a0</anchor>
      <arglist>(double _t_rate)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoStochTournamentTruncate&lt; EOT &gt;</type>
      <name>truncate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPlus&lt; EOT &gt;</type>
      <name>plus</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSSGAWorseReplacement</name>
    <filename>classeo_s_s_g_a_worse_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduceMerge</base>
    <member kind="variable" protection="private">
      <type>eoLinearTruncate&lt; EOT &gt;</type>
      <name>truncate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPlus&lt; EOT &gt;</type>
      <name>plus</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStat</name>
    <filename>classeo_stat.html</filename>
    <templarg>EOT</templarg>
    <templarg>T</templarg>
    <base>eoValueParam&lt; T &gt;</base>
    <base>eoStatBase</base>
    <member kind="function">
      <type></type>
      <name>eoStat</name>
      <anchor>a0</anchor>
      <arglist>(T _value, std::string _description)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStatBase</name>
    <filename>classeo_stat_base.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; const eoPop&lt; EOT &gt; &amp;, void &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lastCall</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoState</name>
    <filename>classeo_state.html</filename>
    <base>eoFunctorStore</base>
    <member kind="function">
      <type>void</type>
      <name>registerObject</name>
      <anchor>a2</anchor>
      <arglist>(eoPersistent &amp;registrant)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>takeOwnership</name>
      <anchor>a3</anchor>
      <arglist>(const T &amp;persistent)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCommentString</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchor>a5</anchor>
      <arglist>(const std::string &amp;_filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchor>a6</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchor>a7</anchor>
      <arglist>(const std::string &amp;_filename) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchor>a8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; std::string, eoPersistent * &gt;</type>
      <name>ObjectMap</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>createObjectName</name>
      <anchor>d0</anchor>
      <arglist>(eoObject *obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>eoState</name>
      <anchor>d1</anchor>
      <arglist>(const eoState &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>eoState &amp;</type>
      <name>operator=</name>
      <anchor>d2</anchor>
      <arglist>(const eoState &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectMap</type>
      <name>objectMap</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ObjectMap::iterator &gt;</type>
      <name>creationOrder</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoPersistent * &gt;</type>
      <name>ownedObjects</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>eoState::loading_error</name>
    <filename>structeo_state_1_1loading__error.html</filename>
    <member kind="function">
      <type></type>
      <name>loading_error</name>
      <anchor>a0</anchor>
      <arglist>(std::string huh=&quot;Error while loading&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStBranchMutation</name>
    <filename>classeo_st_branch_mutation.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoMonOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoStBranchMutation</name>
      <anchor>a0</anchor>
      <arglist>(eoInit&lt; EoType &gt; &amp;_init, unsigned _max_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoStBranchMutation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_length</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInit&lt; EoType &gt; &amp;</type>
      <name>initializer</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStdoutMonitor</name>
    <filename>classeo_stdout_monitor.html</filename>
    <base>eoMonitor</base>
    <member kind="function">
      <type></type>
      <name>eoStdoutMonitor</name>
      <anchor>a0</anchor>
      <arglist>(bool _verbose=true, std::string _delim=&quot;\t&quot;)</arglist>
    </member>
    <member kind="function">
      <type>eoMonitor &amp;</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>verbose</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>delim</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firsttime</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSteadyFitContinue</name>
    <filename>classeo_steady_fit_continue.html</filename>
    <templarg>EOT</templarg>
    <base>eoContinue</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoSteadyFitContinue</name>
      <anchor>a0</anchor>
      <arglist>(unsigned long _minGens, unsigned long _steadyGens)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoSteadyFitContinue</name>
      <anchor>a1</anchor>
      <arglist>(unsigned long _minGens, unsigned long _steadyGen, unsigned long &amp;_currentGen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_vEO)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>totalGenerations</name>
      <anchor>a3</anchor>
      <arglist>(unsigned long _mg, unsigned long _sg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>minGenerations</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>steadyGenerations</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>repMinGenerations</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>repSteadyGenerations</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>steadyState</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>thisGenerationPlaceHolder</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long &amp;</type>
      <name>thisGeneration</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>lastImprovement</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>bestSoFar</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStHoistMutation</name>
    <filename>classeo_st_hoist_mutation.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoMonOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoStHoistMutation</name>
      <anchor>a0</anchor>
      <arglist>(eoInit&lt; EoType &gt; &amp;_init, unsigned _max_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoStHoistMutation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_length</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInit&lt; EoType &gt; &amp;</type>
      <name>initializer</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSTLBF</name>
    <filename>classeo_s_t_l_b_f.html</filename>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>R</templarg>
    <member kind="function">
      <type></type>
      <name>eoSTLBF</name>
      <anchor>a0</anchor>
      <arglist>(eoUF&lt; A1, R &gt; &amp;_f)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(A1 a1, A2 a2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoBF&lt; A1, A2, R &gt; &amp;</type>
      <name>f</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSTLF</name>
    <filename>classeo_s_t_l_f.html</filename>
    <templarg>R</templarg>
    <member kind="typedef">
      <type>R</type>
      <name>result_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoSTLF</name>
      <anchor>a0</anchor>
      <arglist>(eoF&lt; R &gt; &amp;_f)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoF&lt; R &gt; &amp;</type>
      <name>f</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSTLUF</name>
    <filename>classeo_s_t_l_u_f.html</filename>
    <templarg>A1</templarg>
    <templarg>R</templarg>
    <member kind="function">
      <type></type>
      <name>eoSTLUF</name>
      <anchor>a0</anchor>
      <arglist>(eoUF&lt; A1, R &gt; &amp;_f)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(A1 a)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoUF&lt; A1, R &gt; &amp;</type>
      <name>f</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStochasticUniversalSelect</name>
    <filename>classeo_stochastic_universal_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoStochasticUniversalSelect</name>
      <anchor>a0</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;pop=eoPop&lt; EOT &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="function">
      <type>const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>IndexVec</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexVec</type>
      <name>indices</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStochTournamentSelect</name>
    <filename>classeo_stoch_tournament_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoStochTournamentSelect</name>
      <anchor>a0</anchor>
      <arglist>(double _Trate=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Trate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStochTournamentTruncate</name>
    <filename>classeo_stoch_tournament_truncate.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduce</base>
    <member kind="function">
      <type></type>
      <name>eoStochTournamentTruncate</name>
      <anchor>a0</anchor>
      <arglist>(double _t_rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, unsigned _newsize)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>t_rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStochTournamentTruncateSplit</name>
    <filename>classeo_stoch_tournament_truncate_split.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduce</base>
    <member kind="function">
      <type></type>
      <name>eoStochTournamentTruncateSplit</name>
      <anchor>a0</anchor>
      <arglist>(double _t_rate, eoHowMany _howMany, bool _returnEliminated=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, eoPop&lt; EOT &gt; &amp;_eliminated)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>t_rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>returnEliminated</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStochTournamentWorthSelect</name>
    <filename>classeo_stoch_tournament_worth_select.html</filename>
    <templarg>EOT</templarg>
    <templarg>WorthT</templarg>
    <base>eoSelectFromWorth&lt; EOT, WorthT &gt;</base>
    <member kind="typedef">
      <type>std::vector&lt; WorthT &gt;::iterator</type>
      <name>worthIterator</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoStochTournamentWorthSelect</name>
      <anchor>a0</anchor>
      <arglist>(eoPerf2Worth&lt; EOT, WorthT &gt; &amp;_perf2Worth, double _tRate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>tRate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStParseTreeDepthInit</name>
    <filename>classeo_st_parse_tree_depth_init.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoInit&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoStParseTreeDepthInit</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _max_depth, const std::vector&lt; Node &gt; &amp;_node, const int &amp;_return_type, bool _grow=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EoType &amp;_tree)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>generate</name>
      <anchor>d0</anchor>
      <arglist>(std::list&lt; Node &gt; &amp;sequence, int the_max, int request_type)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_depth</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; int, map&lt; int, std::vector&lt; Node &gt; &gt; &gt;</type>
      <name>node</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>return_type</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>grow</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStPointMutation</name>
    <filename>classeo_st_point_mutation.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoMonOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoStPointMutation</name>
      <anchor>a0</anchor>
      <arglist>(std::vector&lt; Node &gt; &amp;_node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoStPointMutation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; int, map&lt; int, std::vector&lt; Node &gt; &gt; &gt;</type>
      <name>node</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoString</name>
    <filename>classeo_string.html</filename>
    <templarg>fitnessT</templarg>
    <base>EO&lt; fitnessT &gt;</base>
    <member kind="typedef">
      <type>char</type>
      <name>Type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>AtomType</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ContainerType</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoString</name>
      <anchor>z24_0</anchor>
      <arglist>(const std::string &amp;_str=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>z24_1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>z26_0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoStSubtreeXOver</name>
    <filename>classeo_st_subtree_x_over.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoQuadOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoStSubtreeXOver</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _max_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoStSubtreeXOver</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1, EoType &amp;_eo2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_length</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSubtreeXOver</name>
    <filename>classeo_subtree_x_over.html</filename>
    <templarg>FType</templarg>
    <templarg>Node</templarg>
    <base>eoQuadOp&lt; eoParseTree&lt; FType, Node &gt; &gt;</base>
    <member kind="typedef">
      <type>eoParseTree&lt; FType, Node &gt;</type>
      <name>EoType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoSubtreeXOver</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _max_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoSubtreeXOver</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(EoType &amp;_eo1, EoType &amp;_eo2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_length</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSurviveAndDie</name>
    <filename>classeo_survive_and_die.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; eoPop&lt; EOT &gt; &amp;, eoPop&lt; EOT &gt; &amp;, void &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoSurviveAndDie</name>
      <anchor>a0</anchor>
      <arglist>(double _survive, double _die, bool _interpret_as_rate=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoHowMany</type>
      <name>howmanySurvive</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eoHowMany</type>
      <name>howmanyDie</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoSymInit</name>
    <filename>classeo_sym_init.html</filename>
    <templarg>EoType</templarg>
    <base>eoInit&lt; EoType &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoSymInit</name>
      <anchor>a0</anchor>
      <arglist>(TreeBuilder &amp;_builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoSymInit</name>
      <anchor>a1</anchor>
      <arglist>(TreeBuilder &amp;_builder, double &amp;_grow_prob, unsigned &amp;_max_depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EoType &amp;tree)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TreeBuilder &amp;</type>
      <name>builder</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>own_grow_prob</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>own_max_depth</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double &amp;</type>
      <name>grow_prob</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned &amp;</type>
      <name>max_depth</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>T_pickle_suite</name>
    <filename>struct_t__pickle__suite.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>std::string</type>
      <name>print_to_string</name>
      <anchor>e0</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>boost::python::tuple</type>
      <name>getstate</name>
      <anchor>e1</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setstate</name>
      <anchor>e2</anchor>
      <arglist>(T &amp;t, boost::python::tuple pickled)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTimeCounter</name>
    <filename>classeo_time_counter.html</filename>
    <base>eoUpdater</base>
    <base>eoValueParam&lt; double &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>clock_t</type>
      <name>utime</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTimedDynUpdate</name>
    <filename>classeo_timed_dyn_update.html</filename>
    <base>eoDynUpdater</base>
    <member kind="function">
      <type></type>
      <name>eoTimedDynUpdate</name>
      <anchor>a0</anchor>
      <arglist>(eoUpdatable &amp;_toUpdate, time_t _interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const time_t</type>
      <name>interval</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>time_t</type>
      <name>last_time</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const time_t</type>
      <name>first_time</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTimedMonitor</name>
    <filename>classeo_timed_monitor.html</filename>
    <base>eoMonitor</base>
    <member kind="function">
      <type></type>
      <name>eoTimedMonitor</name>
      <anchor>a0</anchor>
      <arglist>(int seconds_)</arglist>
    </member>
    <member kind="function">
      <type>eoMonitor &amp;</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(eoMonitor &amp;mon)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>clock_t</type>
      <name>last_tick</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>seconds</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoMonitor * &gt;</type>
      <name>monitors</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTimedStateSaver</name>
    <filename>classeo_timed_state_saver.html</filename>
    <base>eoUpdater</base>
    <member kind="function">
      <type></type>
      <name>eoTimedStateSaver</name>
      <anchor>a0</anchor>
      <arglist>(time_t _interval, const eoState &amp;_state, std::string _prefix=&quot;state&quot;, std::string _extension=&quot;sav&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const eoState &amp;</type>
      <name>state</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const time_t</type>
      <name>interval</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>time_t</type>
      <name>last_time</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const time_t</type>
      <name>first_time</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>prefix</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>extension</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTimeVaryingLoopEval</name>
    <filename>classeo_time_varying_loop_eval.html</filename>
    <templarg>EOT</templarg>
    <base>eoPopEvalFunc</base>
    <member kind="function">
      <type></type>
      <name>eoTimeVaryingLoopEval</name>
      <anchor>a0</anchor>
      <arglist>(eoEvalFunc&lt; EOT &gt; &amp;_eval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_parents, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>eval</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTransform</name>
    <filename>classeo_transform.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; eoPop&lt; EOT &gt; &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>eoTruncate</name>
    <filename>classeo_truncate.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduce</base>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator()</name>
      <anchor>d0</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, unsigned _newsize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTruncatedSelectMany</name>
    <filename>classeo_truncated_select_many.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelect</base>
    <member kind="function">
      <type></type>
      <name>eoTruncatedSelectMany</name>
      <anchor>a0</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, double _rateGenitors, double _rateFertile, bool _interpret_as_rateG=true, bool _interpret_as_rateF=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoTruncatedSelectMany</name>
      <anchor>a1</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, eoHowMany _howManyGenitors, eoHowMany _howManyFertile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_source, eoPop&lt; EOT &gt; &amp;_dest)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>select</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howManyGenitors</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howManyFertile</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTruncatedSelectOne</name>
    <filename>classeo_truncated_select_one.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelectOne&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoTruncatedSelectOne</name>
      <anchor>a0</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, double _rateFertile, bool _interpret_as_rateF=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoTruncatedSelectOne</name>
      <anchor>a1</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, eoHowMany _howManyFertile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchor>a2</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_source)</arglist>
    </member>
    <member kind="function">
      <type>const EOT &amp;</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_pop)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>select</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howManyFertile</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPop&lt; EOT &gt;</type>
      <name>tmpPop</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPop&lt; EOT &gt; &amp;</type>
      <name>actualPop</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTruncateSplit</name>
    <filename>classeo_truncate_split.html</filename>
    <templarg>EOT</templarg>
    <base>eoReduceSplit</base>
    <member kind="function">
      <type></type>
      <name>eoTruncateSplit</name>
      <anchor>a0</anchor>
      <arglist>(eoHowMany _howMany, bool _returnEliminated=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_newgen, eoPop&lt; EOT &gt; &amp;_eliminated)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>returnEliminated</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoTruncSelect</name>
    <filename>classeo_trunc_select.html</filename>
    <templarg>EOT</templarg>
    <base>eoSelect</base>
    <member kind="function">
      <type></type>
      <name>eoTruncSelect</name>
      <anchor>a0</anchor>
      <arglist>(eoSelectOne&lt; EOT &gt; &amp;_select, eoHowMany _howMany)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const eoPop&lt; EOT &gt; &amp;_source, eoPop&lt; EOT &gt; &amp;_dest)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoSelectOne&lt; EOT &gt; &amp;</type>
      <name>select</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoHowMany</type>
      <name>howMany</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUBitXover</name>
    <filename>classeo_u_bit_xover.html</filename>
    <templarg>Chrom</templarg>
    <base>eoQuadOp&lt; Chrom &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoUBitXover</name>
      <anchor>a0</anchor>
      <arglist>(const float &amp;_preference=0.5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(Chrom &amp;chrom1, Chrom &amp;chrom2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>preference</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUF</name>
    <filename>classeo_u_f.html</filename>
    <templarg>A1</templarg>
    <templarg>R</templarg>
    <base>eoFunctorBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoUF</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual R</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(A1)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>eoFunctorBase::unary_function_tag</type>
      <name>functor_category</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UF_random_generator</name>
    <filename>class_u_f__random__generator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>UF_random_generator</name>
      <anchor>a0</anchor>
      <arglist>(eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(T _t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>random</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUnaryFunctorCounter</name>
    <filename>classeo_unary_functor_counter.html</filename>
    <templarg>UnaryFunctor</templarg>
    <base>eoValueParam&lt; unsigned long &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoUnaryFunctorCounter</name>
      <anchor>a0</anchor>
      <arglist>(UnaryFunctor &amp;_func, std::string _name=&quot;uf_counter&quot;)</arglist>
    </member>
    <member kind="function">
      <type>UnaryFunctor::result_type</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(typename UnaryFunctor::first_argument_type _arg1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UnaryFunctor &amp;</type>
      <name>func</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>uniform_generator</name>
    <filename>classuniform__generator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>uniform_generator</name>
      <anchor>a0</anchor>
      <arglist>(T _max=T(1.0), eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uniform_generator</name>
      <anchor>a1</anchor>
      <arglist>(T _min, T _max, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>minim</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>range</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>uniform</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUniformAtomExchange</name>
    <filename>classeo_uniform_atom_exchange.html</filename>
    <templarg>Atom</templarg>
    <base>eoAtomExchange</base>
    <member kind="function">
      <type></type>
      <name>eoUniformAtomExchange</name>
      <anchor>a0</anchor>
      <arglist>(double _rate=0.5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomize</name>
      <anchor>a1</anchor>
      <arglist>(unsigned _size1, unsigned _size2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(unsigned _i, Atom &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>mask</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUniformGeneChooser</name>
    <filename>classeo_uniform_gene_chooser.html</filename>
    <templarg>EOT</templarg>
    <base>eoGeneDelChooser</base>
    <member kind="function">
      <type>unsigned</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUniformGenerator</name>
    <filename>classeo_uniform_generator.html</filename>
    <templarg>T</templarg>
    <base>eoRndGenerator</base>
    <member kind="function">
      <type></type>
      <name>eoUniformGenerator</name>
      <anchor>a0</anchor>
      <arglist>(T _max=T(1.0), eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoUniformGenerator</name>
      <anchor>a1</anchor>
      <arglist>(T _min, T _max, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>minim</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>range</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>uniform</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUniformInit</name>
    <filename>classeo_uniform_init.html</filename>
    <templarg>T</templarg>
    <base>eoInit&lt; T &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoUniformInit</name>
      <anchor>a0</anchor>
      <arglist>(T _max=T(1.0), eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoUniformInit</name>
      <anchor>a1</anchor>
      <arglist>(eoRealBounds &amp;_bound, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoUniformInit</name>
      <anchor>a2</anchor>
      <arglist>(T _min, T _max, eoRng &amp;_rng=rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(T &amp;_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a4</anchor>
      <arglist>(bool &amp;_b)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>minim</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>range</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRng &amp;</type>
      <name>uniform</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUniformMutation</name>
    <filename>classeo_uniform_mutation.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="function">
      <type></type>
      <name>eoUniformMutation</name>
      <anchor>a0</anchor>
      <arglist>(const double &amp;_epsilon, const double &amp;_p_change=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoUniformMutation</name>
      <anchor>a1</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds, const double &amp;_epsilon, const double &amp;_p_change=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoUniformMutation</name>
      <anchor>a2</anchor>
      <arglist>(eoRealVectorBounds &amp;_bounds, const std::vector&lt; double &gt; &amp;_epsilon, const std::vector&lt; double &gt; &amp;_p_change)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a4</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>homogeneous</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoRealVectorBounds &amp;</type>
      <name>bounds</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>epsilon</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>p_change</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUpdatable</name>
    <filename>classeo_updatable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eoUpdatable</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoUpdater</name>
    <filename>classeo_updater.html</filename>
    <base>eoF&lt; void &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lastCall</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoValueParam</name>
    <filename>classeo_value_param.html</filename>
    <templarg>ValueType</templarg>
    <base>eoParam</base>
    <member kind="function">
      <type></type>
      <name>eoValueParam</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoValueParam</name>
      <anchor>a1</anchor>
      <arglist>(ValueType _defaultValue, std::string _longName, std::string _description=&quot;No description&quot;, char _shortHand=0, bool _required=false)</arglist>
    </member>
    <member kind="function">
      <type>ValueType &amp;</type>
      <name>value</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>value</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchor>a5</anchor>
      <arglist>(const std::string &amp;_value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType</type>
      <name>repValue</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoVariableParetoTraits</name>
    <filename>classeo_variable_pareto_traits.html</filename>
    <base>eoParetoFitnessTraits</base>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setUp</name>
      <anchor>e0</anchor>
      <arglist>(unsigned _n, std::vector&lt; bool &gt; &amp;_b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>unsigned</type>
      <name>nObjectives</name>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>bool</type>
      <name>maximizing</name>
      <anchor>e2</anchor>
      <arglist>(unsigned _i)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>unsigned</type>
      <name>nObj</name>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>std::vector&lt; bool &gt;</type>
      <name>bObj</name>
      <anchor>v1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoVector</name>
    <filename>classeo_vector.html</filename>
    <templarg>FitT</templarg>
    <templarg>GeneType</templarg>
    <base>EO&lt; FitT &gt;</base>
    <member kind="typedef">
      <type>GeneType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; GeneType &gt;</type>
      <name>ContainerType</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVector</name>
      <anchor>a0</anchor>
      <arglist>(unsigned size=0, GeneType value=GeneType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVector</name>
      <anchor>a1</anchor>
      <arglist>(const eoVector&lt; OtherFitnessType, GeneType &gt; &amp;_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchor>a2</anchor>
      <arglist>(const std::vector&lt; GeneType &gt; &amp;_v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a3</anchor>
      <arglist>(const eoVector&lt; FitT, GeneType &gt; &amp;_eo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOn</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFrom</name>
      <anchor>a5</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VirusBitFlip</name>
    <filename>class_virus_bit_flip.html</filename>
    <templarg>FitT</templarg>
    <base>eoMonOp&lt; eoVirus&lt; FitT &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoVirus&lt; FitT &gt; &amp;_chrom)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VirusShiftMutation</name>
    <filename>class_virus_shift_mutation.html</filename>
    <templarg>FitT</templarg>
    <base>eoMonOp&lt; eoVirus&lt; FitT &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>VirusShiftMutation</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(eoVirus&lt; FitT &gt; &amp;_chrom)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoVlAddMutation</name>
    <filename>classeo_vl_add_mutation.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVlAddMutation</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _nMax, eoInit&lt; AtomType &gt; &amp;_atomInit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nMax</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoInit&lt; AtomType &gt; &amp;</type>
      <name>atomInit</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoVlAtomExchangeQuadOp</name>
    <filename>classeo_vl_atom_exchange_quad_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVlAtomExchangeQuadOp</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _Min, unsigned _Max, eoAtomExchange&lt; AtomType &gt; &amp;_atomExchange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, EOT &amp;_eo2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>Min</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>Max</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoAtomExchange&lt; AtomType &gt; &amp;</type>
      <name>atomExchange</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoVlDelMutation</name>
    <filename>classeo_vl_del_mutation.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVlDelMutation</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _nMin, eoGeneDelChooser&lt; EOT &gt; &amp;_chooser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVlDelMutation</name>
      <anchor>a1</anchor>
      <arglist>(unsigned _nMin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EOT &amp;_eo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>className</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nMin</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoUniformGeneChooser&lt; EOT &gt;</type>
      <name>uChooser</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoGeneDelChooser&lt; EOT &gt; &amp;</type>
      <name>chooser</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoVlUniformBinOp</name>
    <filename>classeo_vl_uniform_bin_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoBinOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVlUniformBinOp</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _Min, unsigned _Max, double _rate=0.5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, const EOT &amp;_eo2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>Min</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>Max</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoVlUniformQuadOp</name>
    <filename>classeo_vl_uniform_quad_op.html</filename>
    <templarg>EOT</templarg>
    <base>eoQuadOp&lt; EOT &gt;</base>
    <member kind="typedef">
      <type>EOT::AtomType</type>
      <name>AtomType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoVlUniformQuadOp</name>
      <anchor>a0</anchor>
      <arglist>(unsigned _Min, unsigned _Max, double _rate=0.5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_eo1, EOT &amp;_eo2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>Min</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>Max</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rate</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eoWeakElitistReplacement</name>
    <filename>classeo_weak_elitist_replacement.html</filename>
    <templarg>EOT</templarg>
    <base>eoReplacement</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eoWeakElitistReplacement</name>
      <anchor>a0</anchor>
      <arglist>(eoReplacement&lt; EOT &gt; &amp;_replace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(eoPop&lt; EOT &gt; &amp;_pop, eoPop&lt; EOT &gt; &amp;_offspring)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoReplacement&lt; EOT &gt; &amp;</type>
      <name>replace</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>webpages</name>
    <title>Related webpages</title>
    <filename>webpages</filename>
  </compound>
  <compound kind="page">
    <name>Related</name>
    <title>Projects</title>
    <filename>related</filename>
  </compound>
  <compound kind="group">
    <name>Bitstring</name>
    <title>Bitstring</title>
    <filename>group__bitstring.html</filename>
    <class kind="class">eoBit</class>
    <class kind="class">eoBit</class>
    <class kind="class">eoBitBitFlip</class>
    <class kind="class">eoDetBitFlip</class>
    <class kind="class">eoBitMutation</class>
    <class kind="class">eoBitInversion</class>
    <class kind="class">eoBitNext</class>
    <class kind="class">eoBitPrev</class>
    <class kind="class">eo1PtBitCrossover</class>
    <class kind="class">eoUBitXover</class>
    <class kind="class">eoNPtsBitXover</class>
    <class kind="class">eoBitGxOver</class>
  </compound>
  <compound kind="group">
    <name>Operators</name>
    <title>Operators</title>
    <filename>group___operators.html</filename>
  </compound>
  <compound kind="group">
    <name>PropCombinedOperators</name>
    <title>PropCombinedOperators</title>
    <filename>group___prop_combined_operators.html</filename>
  </compound>
  <compound kind="group">
    <name>ParseTree</name>
    <title>ParseTree</title>
    <filename>group___parse_tree.html</filename>
    <class kind="class">eoParseTree</class>
    <class kind="class">eoParseTreeDepthInit</class>
    <class kind="class">eoSubtreeXOver</class>
    <class kind="class">eoBranchMutation</class>
    <class kind="class">eoPointMutation</class>
    <class kind="class">eoExpansionMutation</class>
    <class kind="class">eoCollapseSubtreeMutation</class>
    <class kind="class">eoHoistMutation</class>
    <member kind="function">
      <type>void</type>
      <name>eoInitRampedHalfAndHalf</name>
      <anchor>ga0</anchor>
      <arglist>(eoPop&lt; eoParseTree&lt; FType, Node &gt; &gt; &amp;pop, unsigned int population_size, unsigned int init_max_depth, std::vector&lt; Node &gt; &amp;initializor)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>StParseTree</name>
    <title>StParseTree</title>
    <filename>group___st_parse_tree.html</filename>
    <class kind="class">eoStParseTreeDepthInit</class>
    <class kind="class">eoStSubtreeXOver</class>
    <class kind="class">eoStBranchMutation</class>
    <class kind="class">eoStPointMutation</class>
    <class kind="class">eoStHoistMutation</class>
  </compound>
  <compound kind="group">
    <name>EvolutionStrategies</name>
    <title>EvolutionStrategies</title>
    <filename>group___evolution_strategies.html</filename>
    <class kind="class">eoEsChromInit</class>
    <class kind="class">eoEsFull</class>
    <class kind="class">eoEsMutate</class>
    <class kind="class">eoEsMutationInit</class>
    <class kind="class">eoEsSimple</class>
    <class kind="class">eoEsStdev</class>
    <class kind="class">eoIntBounds</class>
    <class kind="class">eoRealBounds</class>
  </compound>
  <compound kind="group">
    <name>Selectors</name>
    <title>Selectors</title>
    <filename>group__selectors.html</filename>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/</path>
    <filename>dir_000020.html</filename>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/gprop/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/gpsymreg/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/mastermind/</dir>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/</path>
    <filename>dir_000007.html</filename>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/MGE/</dir>
    <file>eoAged.h</file>
    <file>eoDrawable.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/do/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/do/</path>
    <filename>dir_000025.html</filename>
    <file>make_algo_easea.h</file>
    <file>make_algo_pareto.h</file>
    <file>make_algo_scalar.h</file>
    <file>make_checkpoint.h</file>
    <file>make_checkpoint_assembled.h</file>
    <file>make_checkpoint_FDC.h</file>
    <file>make_checkpoint_pareto.h</file>
    <file>make_continue.h</file>
    <file>make_continue_pareto.h</file>
    <file>make_general_replacement.h</file>
    <file>make_pop.h</file>
    <file>make_run.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/eo_interface/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/eo_interface/</path>
    <filename>dir_000018.html</filename>
    <file>eoSym.h</file>
    <file>eoSymCrossover.cpp</file>
    <file>eoSymCrossover.h</file>
    <file>eoSymEval.h</file>
    <file>eoSymInit.h</file>
    <file>eoSymLambdaMutate.cpp</file>
    <file>eoSymLambdaMutate.h</file>
    <file>eoSymMutate.cpp</file>
    <file>eoSymMutate.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/es/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/es/</path>
    <filename>dir_000010.html</filename>
    <file>CMAParams.cpp</file>
    <file>CMAParams.h</file>
    <file>CMAState.cpp</file>
    <file>CMAState.h</file>
    <file>eig.cpp</file>
    <file>eig.h</file>
    <file>eoCMABreed.h</file>
    <file>eoCMAInit.h</file>
    <file>eoEsChromInit.h</file>
    <file>eoEsFull.h</file>
    <file>eoEsGlobalXover.h</file>
    <file>eoEsMutate.h</file>
    <file>eoEsMutationInit.h</file>
    <file>eoEsSimple.h</file>
    <file>eoEsStandardXover.h</file>
    <file>eoEsStdev.h</file>
    <file>eoNormalMutation.h</file>
    <file>eoReal.h</file>
    <file>eoRealAtomXover.h</file>
    <file>eoRealInitBounded.h</file>
    <file>eoRealOp.h</file>
    <file>eoSBXcross.h</file>
    <file>make_algo_scalar_es.cpp</file>
    <file>make_algo_scalar_real.cpp</file>
    <file>make_checkpoint_es.cpp</file>
    <file>make_checkpoint_real.cpp</file>
    <file>make_continue_es.cpp</file>
    <file>make_continue_real.cpp</file>
    <file>make_es.h</file>
    <file>make_genotype_es.cpp</file>
    <file>make_genotype_real.cpp</file>
    <file>make_genotype_real.h</file>
    <file>es/make_op.h</file>
    <file>make_op_es.cpp</file>
    <file>make_op_es.h</file>
    <file>make_op_real.cpp</file>
    <file>make_op_real.h</file>
    <file>make_pop_es.cpp</file>
    <file>make_pop_real.cpp</file>
    <file>make_real.h</file>
    <file>make_run_es.cpp</file>
    <file>make_run_real.cpp</file>
    <file>matrices.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/eval/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/eval/</path>
    <filename>dir_000009.html</filename>
    <file>BoundsCheck.cpp</file>
    <file>BoundsCheck.h</file>
    <file>Interval.h</file>
    <file>MultiFuncs.cpp</file>
    <file>MultiFunction.cpp</file>
    <file>MultiFunction.h</file>
    <file>sym_compile.cpp</file>
    <file>sym_compile.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/fun/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/fun/</path>
    <filename>dir_000022.html</filename>
    <file>FunDef.cpp</file>
    <file>FunDef.h</file>
    <file>sym_operations.cpp</file>
    <file>SymOps.cpp</file>
    <file>SymOps.h</file>
    <file>util.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/ga/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/ga/</path>
    <filename>dir_000013.html</filename>
    <file>eoBit.h</file>
    <file>eoBitOp.h</file>
    <file>eoBitOpFactory.h</file>
    <file>eoBoolFlip.h</file>
    <file>eoPBILAdditive.h</file>
    <file>eoPBILDistrib.h</file>
    <file>eoPBILOrg.h</file>
    <file>make_algo_scalar_ga.cpp</file>
    <file>make_checkpoint_ga.cpp</file>
    <file>make_continue_ga.cpp</file>
    <file>make_ga.h</file>
    <file>make_genotype_ga.cpp</file>
    <file>make_genotype_ga.h</file>
    <file>ga/make_op.h</file>
    <file>make_op_ga.cpp</file>
    <file>make_PBILdistrib.h</file>
    <file>make_PBILupdate.h</file>
    <file>make_pop_ga.cpp</file>
    <file>make_run_ga.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/gen/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/gen/</path>
    <filename>dir_000024.html</filename>
    <file>LanguageTable.cpp</file>
    <file>LanguageTable.h</file>
    <file>NodeSelector.cpp</file>
    <file>NodeSelector.h</file>
    <file>TreeBuilder.cpp</file>
    <file>TreeBuilder.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/gp/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/gp/</path>
    <filename>dir_000017.html</filename>
    <file>eoParseTree.h</file>
    <file>eoParseTreeDepthInit.h</file>
    <file>eoParseTreeOp.h</file>
    <file>eoStParseTreeDepthInit.h</file>
    <file>eoStParseTreeOp.h</file>
    <file>node_pool.h</file>
    <file>parse_tree.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/gprop/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/gprop/</path>
    <filename>dir_000023.html</filename>
    <file>gprop.cpp</file>
    <file>gprop.h</file>
    <file>l2.h</file>
    <file>mlp.h</file>
    <file>mse.h</file>
    <file>qp.h</file>
    <file>vecop.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/gpsymreg/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/gpsymreg/</path>
    <filename>dir_000021.html</filename>
    <file>fitness.h</file>
    <file>main.cpp</file>
    <file>node.h</file>
    <file>parameters.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson1/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson1/</path>
    <filename>dir_000019.html</filename>
    <file>exercise1.3.cpp</file>
    <file>FirstBitGA.cpp</file>
    <file>FirstRealGA.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson2/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson2/</path>
    <filename>dir_000004.html</filename>
    <file>tutorial/Lesson2/binary_value.h</file>
    <file>exercise2.3.cpp</file>
    <file>FirstBitEA.cpp</file>
    <file>FirstRealEA.cpp</file>
    <file>tutorial/Lesson2/real_value.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson3/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson3/</path>
    <filename>dir_000005.html</filename>
    <file>tutorial/Lesson3/binary_value.h</file>
    <file>exercise3.1.cpp</file>
    <file>tutorial/Lesson3/real_value.h</file>
    <file>SecondBitEA.cpp</file>
    <file>SecondRealEA.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson4/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson4/</path>
    <filename>dir_000006.html</filename>
    <file>tutorial/Lesson4/binary_value.h</file>
    <file>BitEA.cpp</file>
    <file>ESEA.cpp</file>
    <file>tutorial/Lesson4/real_value.h</file>
    <file>RealEA.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson5/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson5/</path>
    <filename>dir_000016.html</filename>
    <file>eoOneMax.h</file>
    <file>eoOneMaxEvalFunc.h</file>
    <file>eoOneMaxInit.h</file>
    <file>eoOneMaxMutation.h</file>
    <file>eoOneMaxQuadCrossover.h</file>
    <file>make_genotype_OneMax.h</file>
    <file>make_OneMax.cpp</file>
    <file>make_op_OneMax.h</file>
    <file>OneMaxEA.cpp</file>
    <file>OneMaxLibEA.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/mastermind/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/app/mastermind/</path>
    <filename>dir_000027.html</filename>
    <file>mastermind.cpp</file>
    <file>mastermind.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/</path>
    <filename>dir_000008.html</filename>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/eo_interface/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/eval/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/fun/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/gen/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/regression/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/sym/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/test/</dir>
    <file>contrib/mathsym/README</file>
    <file>shared_ptr.h</file>
    <file>symreg.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/MGE/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/MGE/</path>
    <filename>dir_000015.html</filename>
    <file>eoInitVirus.h</file>
    <file>eoVirus.h</file>
    <file>VirusOp.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/other/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/other/</path>
    <filename>dir_000014.html</filename>
    <file>eoExternalEO.h</file>
    <file>eoExternalOpFunctions.h</file>
    <file>eoString.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/pyeo/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/pyeo/</path>
    <filename>dir_000001.html</filename>
    <file>abstract1.cpp</file>
    <file>algos.cpp</file>
    <file>breeders.cpp</file>
    <file>continuators.cpp</file>
    <file>def_abstract_functor.h</file>
    <file>geneticOps.cpp</file>
    <file>mergers.cpp</file>
    <file>monitors.cpp</file>
    <file>src/pyeo/NEWS</file>
    <file>perf2worth.cpp</file>
    <file>pickle.h</file>
    <file>PyEO.cpp</file>
    <file>PyEO.h</file>
    <file>random_numbers.cpp</file>
    <file>src/pyeo/README</file>
    <file>reduce.cpp</file>
    <file>replacement.cpp</file>
    <file>selectOne.cpp</file>
    <file>selectors.cpp</file>
    <file>statistics.cpp</file>
    <file>valueParam.cpp</file>
    <file>valueParam.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/regression/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/regression/</path>
    <filename>dir_000012.html</filename>
    <file>Dataset.cpp</file>
    <file>Dataset.h</file>
    <file>ErrorMeasure.cpp</file>
    <file>ErrorMeasure.h</file>
    <file>Scaling.cpp</file>
    <file>Scaling.h</file>
    <file>stats.h</file>
    <file>TargetInfo.cpp</file>
    <file>TargetInfo.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/</path>
    <filename>dir_000000.html</filename>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/do/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/es/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/ga/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/gp/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/other/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/pyeo/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/utils/</dir>
    <file>apply.h</file>
    <file>EO.h</file>
    <file>eoAlgo.h</file>
    <file>eoBreed.h</file>
    <file>eoCellularEasyEA.h</file>
    <file>eoCloneOps.h</file>
    <file>eoCombinedContinue.h</file>
    <file>eoCombinedInit.h</file>
    <file>eoContinue.h</file>
    <file>eoCounter.h</file>
    <file>eoCtrlCContinue.cpp</file>
    <file>eoCtrlCContinue.h</file>
    <file>eoDetSelect.h</file>
    <file>eoDetTournamentSelect.h</file>
    <file>eoDistribUpdater.h</file>
    <file>eoDistribution.h</file>
    <file>eoDominanceMap.h</file>
    <file>eoEasyEA.h</file>
    <file>eoEDA.h</file>
    <file>eoEvalContinue.h</file>
    <file>eoEvalFunc.h</file>
    <file>eoEvalFuncCounter.h</file>
    <file>eoEvalFuncPtr.h</file>
    <file>eoFactory.h</file>
    <file>eoFitContinue.h</file>
    <file>eoFitnessScalingSelect.h</file>
    <file>eoFlOrBinOp.h</file>
    <file>eoFlOrMonOp.h</file>
    <file>eoFlOrQuadOp.h</file>
    <file>eoFunctor.h</file>
    <file>eoFunctorStore.cpp</file>
    <file>eoFunctorStore.h</file>
    <file>eoG3Replacement.h</file>
    <file>eoGenContinue.h</file>
    <file>eoGeneralBreeder.h</file>
    <file>eoGenOp.h</file>
    <file>eoInit.h</file>
    <file>eoInvalidateOps.h</file>
    <file>eoLinearFitScaling.h</file>
    <file>eoMerge.h</file>
    <file>eoMergeReduce.h</file>
    <file>eoMGGReplacement.h</file>
    <file>eoNDSorting.h</file>
    <file>eoObject.h</file>
    <file>eoOneToOneBreeder.h</file>
    <file>eoOp.h</file>
    <file>eoOpContainer.h</file>
    <file>eoOpSelMason.h</file>
    <file>eoParetoConstraintFitness.h</file>
    <file>eoParetoFitness.cpp</file>
    <file>eoParetoFitness.h</file>
    <file>eoParetoRanking.h</file>
    <file>eoPerf2Worth.h</file>
    <file>eoPeriodicContinue.h</file>
    <file>eoPersistent.cpp</file>
    <file>eoPersistent.h</file>
    <file>eoPop.h</file>
    <file>eoPopAlgo.h</file>
    <file>eoPopEvalFunc.h</file>
    <file>eoPopulator.h</file>
    <file>eoPrintable.cpp</file>
    <file>eoPrintable.h</file>
    <file>eoPropGAGenOp.h</file>
    <file>eoProportionalCombinedOp.h</file>
    <file>eoProportionalSelect.h</file>
    <file>eoRandomSelect.h</file>
    <file>eoRanking.h</file>
    <file>eoRankingSelect.h</file>
    <file>eoReduce.h</file>
    <file>eoReduceMerge.h</file>
    <file>eoReduceMergeReduce.h</file>
    <file>eoReduceSplit.h</file>
    <file>eoReplacement.h</file>
    <file>eoScalarFitness.h</file>
    <file>eoScalarFitnessAssembled.cpp</file>
    <file>eoScalarFitnessAssembled.h</file>
    <file>eoSelect.h</file>
    <file>eoSelectFactory.h</file>
    <file>eoSelectFromWorth.h</file>
    <file>eoSelectMany.h</file>
    <file>eoSelectNumber.h</file>
    <file>eoSelectOne.h</file>
    <file>eoSelectPerc.h</file>
    <file>eoSequentialSelect.h</file>
    <file>eoSGA.h</file>
    <file>eoSGAGenOp.h</file>
    <file>eoSGATransform.h</file>
    <file>eoSharing.h</file>
    <file>eoSharingSelect.h</file>
    <file>eoSimpleEDA.h</file>
    <file>eoSteadyFitContinue.h</file>
    <file>eoSTLFunctor.h</file>
    <file>eoStochasticUniversalSelect.h</file>
    <file>eoStochTournamentSelect.h</file>
    <file>eoSurviveAndDie.h</file>
    <file>eoTransform.h</file>
    <file>eoTruncatedSelectMany.h</file>
    <file>eoTruncatedSelectOne.h</file>
    <file>eoTruncSelect.h</file>
    <file>eoVariableLengthCrossover.h</file>
    <file>eoVariableLengthMutation.h</file>
    <file>eoVector.h</file>
    <file>es.h</file>
    <file>ga.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/sym/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/sym/</path>
    <filename>dir_000028.html</filename>
    <file>README.cpp</file>
    <file>Sym.cpp</file>
    <file>Sym.h</file>
    <file>SymImpl.cpp</file>
    <file>SymImpl.h</file>
    <file>token.h</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Templates/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Templates/</path>
    <filename>dir_000026.html</filename>
    <file>make_genotype_MyStruct.h</file>
    <file>make_MyStruct.cpp</file>
    <file>make_op_MyStruct.h</file>
    <file>MyStructEA.cpp</file>
    <file>MyStructLibEA.cpp</file>
    <file>MyStructSEA.cpp</file>
    <file>tutorial/Templates/README</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/test/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/contrib/mathsym/test/</path>
    <filename>dir_000029.html</filename>
    <file>test_compile.cpp</file>
    <file>test_diff.cpp</file>
    <file>test_lambda.cpp</file>
    <file>test_mf.cpp</file>
    <file>test_simplify.cpp</file>
    <file>testeo.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/test/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/test/</path>
    <filename>dir_000002.html</filename>
    <file>test/binary_value.h</file>
    <file>fitness_traits.cpp</file>
    <file>test/real_value.h</file>
    <file>RoyalRoad.h</file>
    <file>t-eo.cpp</file>
    <file>t-eoAtomOps.cpp</file>
    <file>t-eoBaseFunctions.cpp</file>
    <file>t-eobin.cpp</file>
    <file>t-eobreeder.cpp</file>
    <file>t-eoCheckpointing.cpp</file>
    <file>t-eoCMAES.cpp</file>
    <file>t-eoEasyEA.cpp</file>
    <file>t-eoESAll.cpp</file>
    <file>t-eoESFull.cpp</file>
    <file>t-eoESOps.cpp</file>
    <file>t-eoExternalEO.cpp</file>
    <file>t-eofitness.cpp</file>
    <file>t-eoFitnessAssembled.cpp</file>
    <file>t-eoFitnessAssembledEA.cpp</file>
    <file>t-eoFunctor.cpp</file>
    <file>t-eoGA.cpp</file>
    <file>t-eogeneration.cpp</file>
    <file>t-eoGenOp.cpp</file>
    <file>t-eoGOpSel.cpp</file>
    <file>t-eoinclusion.cpp</file>
    <file>t-eoinsertion.cpp</file>
    <file>t-eolottery.cpp</file>
    <file>t-eoNonUniform.cpp</file>
    <file>t-eoPareto.cpp</file>
    <file>t-eoParetoFitness.cpp</file>
    <file>t-eoPBIL.cpp</file>
    <file>t-eoproblem.cpp</file>
    <file>t-eoRandom.cpp</file>
    <file>t-eoReal.cpp</file>
    <file>t-eoReplacement.cpp</file>
    <file>t-eoRoulette.cpp</file>
    <file>t-eoSelect.cpp</file>
    <file>t-eoSharing.cpp</file>
    <file>t-eoSSGA.cpp</file>
    <file>t-eoStateAndParser.cpp</file>
    <file>t-eoSymreg.cpp</file>
    <file>t-eoUniform.cpp</file>
    <file>t-eoVector.cpp</file>
    <file>t-eoVirus.cpp</file>
    <file>t-MGE-control.cpp</file>
    <file>t-MGE.cpp</file>
    <file>t-MGE1bit.cpp</file>
    <file>t-selectOne.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/</path>
    <filename>dir_000003.html</filename>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson1/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson2/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson3/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson4/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Lesson5/</dir>
    <dir>/users/dsa/marc/WWW/EO/eo.19Oct2006/tutorial/Templates/</dir>
    <file>tutorial/README</file>
  </compound>
  <compound kind="dir">
    <name>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/utils/</name>
    <path>/users/dsa/marc/WWW/EO/eo.19Oct2006/src/utils/</path>
    <filename>dir_000011.html</filename>
    <file>compatibility.h</file>
    <file>eoAssembledFitnessStat.h</file>
    <file>eoCheckPoint.h</file>
    <file>eoData.cpp</file>
    <file>eoData.h</file>
    <file>eoDistance.h</file>
    <file>eoFDCStat.h</file>
    <file>eoFileMonitor.cpp</file>
    <file>eoFileMonitor.h</file>
    <file>eoFileSnapshot.h</file>
    <file>eoGnuplot.cpp</file>
    <file>eoGnuplot.h</file>
    <file>eoGnuplot1DMonitor.cpp</file>
    <file>eoGnuplot1DMonitor.h</file>
    <file>eoGnuplot1DSnapshot.cpp</file>
    <file>eoGnuplot1DSnapshot.h</file>
    <file>eoHowMany.h</file>
    <file>eoIntBounds.cpp</file>
    <file>eoIntBounds.h</file>
    <file>eoMOFitnessStat.h</file>
    <file>eoMonitor.h</file>
    <file>eoParam.h</file>
    <file>eoParser.cpp</file>
    <file>eoParser.h</file>
    <file>eoPopStat.h</file>
    <file>eoRealBounds.cpp</file>
    <file>eoRealBounds.h</file>
    <file>eoRealVectorBounds.h</file>
    <file>eoRndGenerators.h</file>
    <file>eoRNG.cpp</file>
    <file>eoRNG.h</file>
    <file>eoScalarFitnessStat.h</file>
    <file>eoStat.h</file>
    <file>eoState.cpp</file>
    <file>eoState.h</file>
    <file>eoStdoutMonitor.cpp</file>
    <file>eoStdoutMonitor.h</file>
    <file>eoTimeCounter.h</file>
    <file>eoTimedMonitor.h</file>
    <file>eoUniformInit.h</file>
    <file>eoUpdatable.h</file>
    <file>eoUpdater.cpp</file>
    <file>eoUpdater.h</file>
    <file>make_help.cpp</file>
    <file>pipecom.cpp</file>
    <file>pipecom.h</file>
    <file>rnd_generators.h</file>
    <file>selectors.h</file>
  </compound>
  <compound kind="namespace">
    <name>gp_parse_tree</name>
    <filename>namespacegp__parse__tree.html</filename>
    <class kind="class">gp_parse_tree::MemPool</class>
    <class kind="struct">gp_parse_tree::MemPool::Link</class>
    <class kind="struct">gp_parse_tree::MemPool::Chunk</class>
    <class kind="class">gp_parse_tree::Node_alloc</class>
    <class kind="class">gp_parse_tree::Standard_alloc</class>
    <class kind="class">gp_parse_tree::Standard_Node_alloc</class>
    <class kind="class">gp_parse_tree::Tree_alloc</class>
    <class kind="class">gp_parse_tree::parse_tree</class>
    <class kind="class">gp_parse_tree::parse_tree::subtree</class>
    <class kind="class">gp_parse_tree::parse_tree::base_iterator</class>
    <class kind="class">gp_parse_tree::parse_tree::iterator</class>
    <class kind="class">gp_parse_tree::parse_tree::embedded_iterator</class>
    <class kind="class">gp_parse_tree::parse_tree::base_const_iterator</class>
    <class kind="class">gp_parse_tree::parse_tree::const_iterator</class>
    <class kind="class">gp_parse_tree::parse_tree::embedded_const_iterator</class>
    <member kind="function">
      <type>void</type>
      <name>do_the_swap</name>
      <anchor>a0</anchor>
      <arglist>(T &amp;a, T &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gp_parse_tree::MemPool</name>
    <filename>classgp__parse__tree_1_1_mem_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>MemPool</name>
      <anchor>a0</anchor>
      <arglist>(unsigned int sz)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchor>a3</anchor>
      <arglist>(void *b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>grow</name>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Chunk *</type>
      <name>chunks</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const unsigned int</type>
      <name>esize</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Link *</type>
      <name>head</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
