.TH "moeoIndicatorBasedFitnessAssignment" 3 "17 Apr 2007" "Version 1.0.alpha" "ParadisEO-MOEO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
moeoIndicatorBasedFitnessAssignment \- Fitness assignment sheme based an Indicator proposed in: E.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <moeoIndicatorBasedFitnessAssignment.h>\fP
.PP
Inherits \fBmoeoParetoBasedFitnessAssignment< MOEOT >< MOEOT >\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef MOEOT::ObjectiveVector \fBObjectiveVector\fP"
.br
.RI "\fIThe type of objective vector. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmoeoIndicatorBasedFitnessAssignment\fP (\fBmoeoNormalizedSolutionVsSolutionBinaryMetric\fP< \fBObjectiveVector\fP, double > *_metric, const double _kappa)"
.br
.RI "\fICtor. \fP"
.ti -1c
.RI "void \fBoperator()\fP (\fBeoPop\fP< MOEOT > &_pop)"
.br
.RI "\fISets the fitness values for every solution contained in the population _pop. \fP"
.ti -1c
.RI "void \fBupdateByDeleting\fP (\fBeoPop\fP< MOEOT > &_pop, \fBObjectiveVector\fP &_objVec)"
.br
.RI "\fIUpdates the fitness values of the whole population _pop by taking the deletion of the objective vector _objVec into account. \fP"
.ti -1c
.RI "double \fBupdateByAdding\fP (\fBeoPop\fP< MOEOT > &_pop, \fBObjectiveVector\fP &_objVec)"
.br
.RI "\fIUpdates the fitness values of the whole population _pop by taking the adding of the objective vector _objVec into account and returns the fitness value of _objVec. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBsetup\fP (const \fBeoPop\fP< MOEOT > &_pop)"
.br
.RI "\fISets the bounds for every objective using the min and the max value for every objective vector of _pop. \fP"
.ti -1c
.RI "void \fBcomputeValues\fP (const \fBeoPop\fP< MOEOT > &_pop)"
.br
.RI "\fICompute every indicator value in values (values[i] = I(_v[i], _o)). \fP"
.ti -1c
.RI "void \fBsetFitnesses\fP (\fBeoPop\fP< MOEOT > &_pop)"
.br
.RI "\fISets the fitness value of the whple population. \fP"
.ti -1c
.RI "double \fBcomputeFitness\fP (const unsigned _idx)"
.br
.RI "\fIReturns the fitness value of the _idx th individual of the population. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBmoeoNormalizedSolutionVsSolutionBinaryMetric\fP< \fBObjectiveVector\fP, double > * \fBmetric\fP"
.br
.RI "\fIthe quality indicator \fP"
.ti -1c
.RI "double \fBkappa\fP"
.br
.RI "\fIthe scaling factor \fP"
.ti -1c
.RI "std::vector< std::vector< double > > \fBvalues\fP"
.br
.RI "\fIthe computed indicator values \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class MOEOT> class moeoIndicatorBasedFitnessAssignment< MOEOT >"
Fitness assignment sheme based an Indicator proposed in: E. 

Zitzler, S. KÃ¼nzli, 'Indicator-Based Selection in Multiobjective Search', Proc. 8th International Conference on Parallel Problem Solving from Nature (PPSN VIII), pp. 832-842, Birmingham, UK (2004). This strategy is, for instance, used in IBEA. 
.PP
Definition at line 28 of file moeoIndicatorBasedFitnessAssignment.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class MOEOT> \fBmoeoIndicatorBasedFitnessAssignment\fP< MOEOT >::\fBmoeoIndicatorBasedFitnessAssignment\fP (\fBmoeoNormalizedSolutionVsSolutionBinaryMetric\fP< \fBObjectiveVector\fP, double > * _metric, const double _kappa)\fC [inline]\fP"
.PP
Ctor. 
.PP
\fBParameters:\fP
.RS 4
\fI_metric\fP the quality indicator 
.br
\fI_kappa\fP the scaling factor 
.RE
.PP

.PP
Definition at line 41 of file moeoIndicatorBasedFitnessAssignment.h.
.SH "Member Function Documentation"
.PP 
.SS "template<class MOEOT> void \fBmoeoIndicatorBasedFitnessAssignment\fP< MOEOT >::operator() (\fBeoPop\fP< MOEOT > & _pop)\fC [inline, virtual]\fP"
.PP
Sets the fitness values for every solution contained in the population _pop. 
.PP
\fBParameters:\fP
.RS 4
\fI_pop\fP the population 
.RE
.PP

.PP
Implements \fBeoUF< eoPop< MOEOT > &, void >\fP.
.PP
Definition at line 49 of file moeoIndicatorBasedFitnessAssignment.h.
.PP
References moeoIndicatorBasedFitnessAssignment< MOEOT >::computeValues(), moeoIndicatorBasedFitnessAssignment< MOEOT >::setFitnesses(), and moeoIndicatorBasedFitnessAssignment< MOEOT >::setup().
.SS "template<class MOEOT> void \fBmoeoIndicatorBasedFitnessAssignment\fP< MOEOT >::updateByDeleting (\fBeoPop\fP< MOEOT > & _pop, \fBObjectiveVector\fP & _objVec)\fC [inline, virtual]\fP"
.PP
Updates the fitness values of the whole population _pop by taking the deletion of the objective vector _objVec into account. 
.PP
\fBParameters:\fP
.RS 4
\fI_pop\fP the population 
.br
\fI_objVec\fP the objective vector 
.RE
.PP

.PP
Implements \fBmoeoFitnessAssignment< MOEOT >\fP.
.PP
Definition at line 65 of file moeoIndicatorBasedFitnessAssignment.h.
.PP
References moeoIndicatorBasedFitnessAssignment< MOEOT >::kappa, and moeoIndicatorBasedFitnessAssignment< MOEOT >::metric.
.SS "template<class MOEOT> double \fBmoeoIndicatorBasedFitnessAssignment\fP< MOEOT >::updateByAdding (\fBeoPop\fP< MOEOT > & _pop, \fBObjectiveVector\fP & _objVec)\fC [inline]\fP"
.PP
Updates the fitness values of the whole population _pop by taking the adding of the objective vector _objVec into account and returns the fitness value of _objVec. 
.PP
\fBParameters:\fP
.RS 4
\fI_pop\fP the population 
.br
\fI_objVec\fP the objective vector 
.RE
.PP

.PP
Definition at line 86 of file moeoIndicatorBasedFitnessAssignment.h.
.PP
References moeoIndicatorBasedFitnessAssignment< MOEOT >::kappa, and moeoIndicatorBasedFitnessAssignment< MOEOT >::metric.
.SS "template<class MOEOT> void \fBmoeoIndicatorBasedFitnessAssignment\fP< MOEOT >::setup (const \fBeoPop\fP< MOEOT > & _pop)\fC [inline, protected]\fP"
.PP
Sets the bounds for every objective using the min and the max value for every objective vector of _pop. 
.PP
\fBParameters:\fP
.RS 4
\fI_pop\fP the population 
.RE
.PP

.PP
Definition at line 129 of file moeoIndicatorBasedFitnessAssignment.h.
.PP
Referenced by moeoIndicatorBasedFitnessAssignment< MOEOT >::operator()().
.SS "template<class MOEOT> void \fBmoeoIndicatorBasedFitnessAssignment\fP< MOEOT >::computeValues (const \fBeoPop\fP< MOEOT > & _pop)\fC [inline, protected]\fP"
.PP
Compute every indicator value in values (values[i] = I(_v[i], _o)). 
.PP
\fBParameters:\fP
.RS 4
\fI_pop\fP the population 
.RE
.PP

.PP
Definition at line 151 of file moeoIndicatorBasedFitnessAssignment.h.
.PP
References moeoIndicatorBasedFitnessAssignment< MOEOT >::values.
.PP
Referenced by moeoIndicatorBasedFitnessAssignment< MOEOT >::operator()().
.SS "template<class MOEOT> void \fBmoeoIndicatorBasedFitnessAssignment\fP< MOEOT >::setFitnesses (\fBeoPop\fP< MOEOT > & _pop)\fC [inline, protected]\fP"
.PP
Sets the fitness value of the whple population. 
.PP
\fBParameters:\fP
.RS 4
\fI_pop\fP the population 
.RE
.PP

.PP
Definition at line 173 of file moeoIndicatorBasedFitnessAssignment.h.
.PP
References moeoIndicatorBasedFitnessAssignment< MOEOT >::computeFitness().
.PP
Referenced by moeoIndicatorBasedFitnessAssignment< MOEOT >::operator()().
.SS "template<class MOEOT> double \fBmoeoIndicatorBasedFitnessAssignment\fP< MOEOT >::computeFitness (const unsigned _idx)\fC [inline, protected]\fP"
.PP
Returns the fitness value of the _idx th individual of the population. 
.PP
\fBParameters:\fP
.RS 4
\fI_idx\fP the index 
.RE
.PP

.PP
Definition at line 186 of file moeoIndicatorBasedFitnessAssignment.h.
.PP
References moeoIndicatorBasedFitnessAssignment< MOEOT >::kappa, and moeoIndicatorBasedFitnessAssignment< MOEOT >::values.
.PP
Referenced by moeoIndicatorBasedFitnessAssignment< MOEOT >::setFitnesses().

.SH "Author"
.PP 
Generated automatically by Doxygen for ParadisEO-MOEO from the source code.
