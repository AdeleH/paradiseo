.TH "eoDominanceMap" 3 "19 Oct 2006" "Version 0.9.4-cvs" "EO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eoDominanceMap \- eoDominanceMap, utility class to calculate and maintain a map (std::vector<std::vector<bool> >) of pareto dominance statistics.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <eoDominanceMap.h>\fP
.PP
Inherits \fBeoUF< const eoPop< EoType > &, void >\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "\fIClears the map. \fP"
.ti -1c
.RI "void \fBoperator()\fP (const \fBeoPop\fP< \fBEoType\fP > &_pop)"
.br
.RI "\fIUpdate or create the dominance map. \fP"
.ti -1c
.RI "void \fBremove\fP (unsigned i)"
.br
.RI "\fIRemoves the domination info for a given individual, thus nothing dominates it and it dominates nothing. \fP"
.ti -1c
.RI "void \fBsetup\fP (const \fBeoPop\fP< \fBEoType\fP > &_pop)"
.br
.RI "\fICreate domination matrix from scratch. \fP"
.ti -1c
.RI "std::vector< double > \fBsum_dominators\fP () const "
.br
.RI "\fIFor all elements, returns the no. \fP"
.ti -1c
.RI "std::vector< double > \fBsum_dominants\fP () const "
.br
.RI "\fIFor all elements, returns the number of elements that the element dominates Thus: higher is better It returns a std::vector<double> cuz that makes subsequent manipulation that much easier. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< typename EoType::Fitness > \fBfitness\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class EoType> class eoDominanceMap< EoType >"
eoDominanceMap, utility class to calculate and maintain a map (std::vector<std::vector<bool> >) of pareto dominance statistics. 

It is set up such that
.PP
if map[i][j] == true then i dominates j
.PP
The dominance map can be used to perform pareto ranking (\fBeoParetoRanking\fP) or non dominated sorting. For the latter, the \fBremove()\fP member function might come in handy.
.PP
\fBTodo\fP
.RS 4
make it an \fBeoStat\fP? 
.RE
.PP

.PP
Definition at line 47 of file eoDominanceMap.h.
.SH "Member Function Documentation"
.PP 
.SS "template<class EoType> void \fBeoDominanceMap\fP< \fBEoType\fP >::setup (const \fBeoPop\fP< \fBEoType\fP > & _pop)\fC [inline]\fP"
.PP
Create domination matrix from scratch. 
.PP
Complexity O(N^2) 
.PP
Definition at line 81 of file eoDominanceMap.h.
.PP
Referenced by eoDominanceMap< EOT >::operator()().
.SS "template<class EoType> std::vector<double> \fBeoDominanceMap\fP< \fBEoType\fP >::sum_dominators () const\fC [inline]\fP"
.PP
For all elements, returns the no. 
.PP
of elements that dominate the element Thus: lower is better (and 0 is the front). It returns a std::vector<double> cuz that makes subsequent manipulation that much easier 
.PP
Definition at line 118 of file eoDominanceMap.h.
.PP
Referenced by eoParetoRanking< EOT >::calculate_worths().

.SH "Author"
.PP 
Generated automatically by Doxygen for EO from the source code.
