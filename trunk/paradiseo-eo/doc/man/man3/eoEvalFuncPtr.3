.TH "eoEvalFuncPtr" 3 "19 Oct 2006" "Version 0.9.4-cvs" "EO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eoEvalFuncPtr \- EOEvalFuncPtr: This class takes an existing function pointer and converts it into a evaluation function class.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <eoEvalFuncPtr.h>\fP
.PP
Inherits \fBeoEvalFunc< EOT >< EOT >\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBeoEvalFuncPtr\fP (\fBFitT\fP(*_eval)(FunctionArg))"
.br
.RI "\fIApplies the function to the chromosome and sets the fitness of the Chrom. \fP"
.ti -1c
.RI "virtual void \fBoperator()\fP (\fBEOT\fP &_eo)"
.br
.RI "\fIEffectively applies the evaluation function to an \fBEO\fP. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBFitT\fP(* \fBevalFunc\fP )(FunctionArg)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class EOT, class FitT = typename EOT::Fitness, class FunctionArg = const EOT&> struct eoEvalFuncPtr< EOT, FitT, FunctionArg >"
EOEvalFuncPtr: This class takes an existing function pointer and converts it into a evaluation function class. 

That way, old style C or C++ functions can be adapted to \fBEO\fP function classes. 
.PP
Definition at line 43 of file eoEvalFuncPtr.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class EOT, class FitT = typename EOT::Fitness, class FunctionArg = const EOT&> \fBeoEvalFuncPtr\fP< \fBEOT\fP, \fBFitT\fP, FunctionArg >::\fBeoEvalFuncPtr\fP (\fBFitT\fP(*)(FunctionArg) _eval)\fC [inline]\fP"
.PP
Applies the function to the chromosome and sets the fitness of the Chrom. 
.PP
Thus, the evaluation function need not be worried about that. 
.PP
\fBParameters:\fP
.RS 4
\fI_eval\fP pointer to the evaluation function, takes a EOT as an argument and returns the fitness 
.RE
.PP
\fBReturns:\fP
.RS 4
the evaluated fitness for that object. 
.RE
.PP

.PP
Definition at line 51 of file eoEvalFuncPtr.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for EO from the source code.
