<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>CitySwap</name>
    <filename>classCitySwap.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classCitySwap.html</anchorfile>
      <anchor>7e6958b62048c89604cbf046b86bdf2d</anchor>
      <arglist>(Route &amp;__route)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DisplayBestRoute</name>
    <filename>classDisplayBestRoute.html</filename>
    <member kind="function">
      <type></type>
      <name>DisplayBestRoute</name>
      <anchorfile>classDisplayBestRoute.html</anchorfile>
      <anchor>db263e38f1e82174f811bf62f323f87f</anchor>
      <arglist>(eoPop&lt; Route &gt; &amp;__pop)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classDisplayBestRoute.html</anchorfile>
      <anchor>ee879344a6d8b81a04d4eabbed2c7a04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoPop&lt; Route &gt; &amp;</type>
      <name>pop</name>
      <anchorfile>classDisplayBestRoute.html</anchorfile>
      <anchor>5270aabbf294d2deca9878934216eb89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EdgeXover</name>
    <filename>classEdgeXover.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classEdgeXover.html</anchorfile>
      <anchor>cb1c0a103106a4d3319540cb23163a79</anchor>
      <arglist>(Route &amp;__route1, Route &amp;__route2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cross</name>
      <anchorfile>classEdgeXover.html</anchorfile>
      <anchor>88c2d4c9a878454a32d56010f3dddc27</anchor>
      <arglist>(const Route &amp;__par1, const Route &amp;__par2, Route &amp;__child)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>remove_entry</name>
      <anchorfile>classEdgeXover.html</anchorfile>
      <anchor>1b3a4c75dd9a034c81af6d89d85d30f5</anchor>
      <arglist>(unsigned __vertex, std::vector&lt; std::set&lt; unsigned &gt; &gt; &amp;__map)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>build_map</name>
      <anchorfile>classEdgeXover.html</anchorfile>
      <anchor>04de96aa1016836e0ba5f4b952a5fa16</anchor>
      <arglist>(const Route &amp;__par1, const Route &amp;__par2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_vertex</name>
      <anchorfile>classEdgeXover.html</anchorfile>
      <anchor>2d3045ef503d8b16a27e11fdc23ca11c</anchor>
      <arglist>(unsigned __vertex, Route &amp;__child)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::set&lt; unsigned &gt; &gt;</type>
      <name>_map</name>
      <anchorfile>classEdgeXover.html</anchorfile>
      <anchor>d41399c6effb54ee48c722f1e19cb3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>visited</name>
      <anchorfile>classEdgeXover.html</anchorfile>
      <anchor>46d4d4724cf6d660b1a7ab4a346573d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MergeRouteEval</name>
    <filename>classMergeRouteEval.html</filename>
    <base>peoAggEvalFunc</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classMergeRouteEval.html</anchorfile>
      <anchor>29cb0028ac0df4b2cee3a809c8f35dea</anchor>
      <arglist>(Route &amp;__route, const int &amp;__part_fit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrderXover</name>
    <filename>classOrderXover.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classOrderXover.html</anchorfile>
      <anchor>0ff6aada669eb8173322ed68cda1ac61</anchor>
      <arglist>(Route &amp;__route1, Route &amp;__route2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cross</name>
      <anchorfile>classOrderXover.html</anchorfile>
      <anchor>d2bf90b5f46ac4a344777e17bc5f364d</anchor>
      <arglist>(const Route &amp;__par1, const Route &amp;__par2, Route &amp;__child)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PartialMappedXover</name>
    <filename>classPartialMappedXover.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classPartialMappedXover.html</anchorfile>
      <anchor>1cda6ea86ca36e5de0125f4ba5cfc695</anchor>
      <arglist>(Route &amp;__route1, Route &amp;__route2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>repair</name>
      <anchorfile>classPartialMappedXover.html</anchorfile>
      <anchor>b6d4035544aff3b2b3fe4b0eeea185a2</anchor>
      <arglist>(Route &amp;__route, unsigned __cut1, unsigned __cut2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PartRouteEval</name>
    <filename>classPartRouteEval.html</filename>
    <member kind="function">
      <type></type>
      <name>PartRouteEval</name>
      <anchorfile>classPartRouteEval.html</anchorfile>
      <anchor>a331566b29bc3227f377004232f05491</anchor>
      <arglist>(float __from, float __to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classPartRouteEval.html</anchorfile>
      <anchor>965fab875fb601f17934a6ece761beae</anchor>
      <arglist>(Route &amp;__route)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>from</name>
      <anchorfile>classPartRouteEval.html</anchorfile>
      <anchor>5bde722e66378b2570ae6c4b4f8df58e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>to</name>
      <anchorfile>classPartRouteEval.html</anchorfile>
      <anchor>de53cc919faa498663f327b72c357da3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RouteEval</name>
    <filename>classRouteEval.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classRouteEval.html</anchorfile>
      <anchor>e10bbe6f792e6f44405953de4f703901</anchor>
      <arglist>(Route &amp;__route)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RouteInit</name>
    <filename>classRouteInit.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classRouteInit.html</anchorfile>
      <anchor>b65a7137e114458faadb6a5510c001f7</anchor>
      <arglist>(Route &amp;__route)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoOpt</name>
    <filename>classTwoOpt.html</filename>
    <base>moMove</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classTwoOpt.html</anchorfile>
      <anchor>ff87d1649a33d42a6d64e8d314ed1af0</anchor>
      <arglist>(Route &amp;__route)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoOptIncrEval</name>
    <filename>classTwoOptIncrEval.html</filename>
    <base>moMoveIncrEval&lt; TwoOpt &gt;</base>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classTwoOptIncrEval.html</anchorfile>
      <anchor>48500077e651c4c6152daef8a396be39</anchor>
      <arglist>(const TwoOpt &amp;__move, const Route &amp;__route)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoOptInit</name>
    <filename>classTwoOptInit.html</filename>
    <base>moMoveInit&lt; TwoOpt &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classTwoOptInit.html</anchorfile>
      <anchor>5bf6af064d37ebd955ffb5a623e78e1b</anchor>
      <arglist>(TwoOpt &amp;__move, const Route &amp;__route)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoOptNext</name>
    <filename>classTwoOptNext.html</filename>
    <base>moNextMove&lt; TwoOpt &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classTwoOptNext.html</anchorfile>
      <anchor>baf229b2e056f39ab971cf2ac66a833e</anchor>
      <arglist>(TwoOpt &amp;__move, const Route &amp;__route)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoOptRand</name>
    <filename>classTwoOptRand.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classTwoOptRand.html</anchorfile>
      <anchor>e2f362f359517c027f6f22fba0aab375</anchor>
      <arglist>(TwoOpt &amp;__move, const Route &amp;__route)</arglist>
    </member>
  </compound>
</tagfile>
