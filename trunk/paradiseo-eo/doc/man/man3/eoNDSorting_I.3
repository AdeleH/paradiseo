.TH "eoNDSorting_I" 3 "19 Oct 2006" "Version 0.9.4-cvs" "EO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eoNDSorting_I \- The original Non Dominated Sorting algorithm from Srinivas and Deb.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <eoNDSorting.h>\fP
.PP
Inherits \fBeoNDSorting< EOT >< EOT >\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBeoNDSorting_I\fP (double _nicheSize, bool nasty_flag_=false)"
.br
.ti -1c
.RI "std::vector< double > \fBniche_penalty\fP (const std::vector< unsigned > &current_front, const \fBeoPop\fP< \fBEOT\fP > &_pop)"
.br
.RI "\fIPure virtual function that calculates the 'distance' for each element in the current front Implement to create your own nondominated sorting algorithm. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBnicheSize\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class EOT> class eoNDSorting_I< EOT >"
The original Non Dominated Sorting algorithm from Srinivas and Deb. 
.PP
Definition at line 380 of file eoNDSorting.h.
.SH "Member Function Documentation"
.PP 
.SS "template<class EOT> std::vector<double> \fBeoNDSorting_I\fP< \fBEOT\fP >::niche_penalty (const std::vector< unsigned > & current_front, const \fBeoPop\fP< \fBEOT\fP > & _pop)\fC [inline, virtual]\fP"
.PP
Pure virtual function that calculates the 'distance' for each element in the current front Implement to create your own nondominated sorting algorithm. 
.PP
The size of the returned std::vector should be equal to the size of the current_front. 
.PP
Implements \fBeoNDSorting< EOT >\fP.
.PP
Definition at line 385 of file eoNDSorting.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for EO from the source code.
