.TH "eoIBEAAvgSorting" 3 "22 Dec 2006" "Version 0.1" "ParadisEO-MOEO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eoIBEAAvgSorting \- Functor The sorting phase of IBEA (Indicator-Based Evolutionary Algorithm) under uncertainty using averaged values for each objective Follow the idea presented in the Deb & Gupta paper 'Searching for Robust Pareto-Optimal Solutions in Multi-Objective Optimization', 2005 Of course, the fitness of an individual needs to be an eoStochasticParetoFitness object.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <eoIBEA.h>\fP
.PP
Inherits \fBeoIBEA< EOT, FitnessEval >\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBeoIBEAAvgSorting\fP (\fBeoBinaryQualityIndicator\fP< FitnessEval > *_I, const double _kappa)"
.br
.RI "\fIconstructor \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBsetBounds\fP (const \fBeoPop\fP< EOT > &_pop)"
.br
.RI "\fIcomputation and setting of the bounds for each objective \fP"
.ti -1c
.RI "void \fBfitnesses\fP (const \fBeoPop\fP< EOT > &_pop)"
.br
.RI "\fIcomputation and setting of the fitness for each individual of the population \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBkappa\fP"
.br
.RI "\fIscaling factor kappa \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class EOT, class FitnessEval = typename EOT::Fitness::FitnessEval> class eoIBEAAvgSorting< EOT, FitnessEval >"
Functor The sorting phase of IBEA (Indicator-Based Evolutionary Algorithm) under uncertainty using averaged values for each objective Follow the idea presented in the Deb & Gupta paper 'Searching for Robust Pareto-Optimal Solutions in Multi-Objective Optimization', 2005 Of course, the fitness of an individual needs to be an eoStochasticParetoFitness object. 
.PP
Definition at line 373 of file eoIBEA.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class EOT, class FitnessEval = typename EOT::Fitness::FitnessEval> \fBeoIBEAAvgSorting\fP< EOT, FitnessEval >::\fBeoIBEAAvgSorting\fP (\fBeoBinaryQualityIndicator\fP< FitnessEval > * _I, const double _kappa)\fC [inline]\fP"
.PP
constructor 
.PP
\fBParameters:\fP
.RS 4
\fIeoBinaryQualityIndicator<EOT>*\fP _I the binary quality indicator to use in the selection process 
.br
\fIdouble\fP _kappa scaling factor kappa 
.RE
.PP

.PP
Definition at line 385 of file eoIBEA.h.
.PP
References eoIBEAAvgSorting< EOT, FitnessEval >::kappa.
.SH "Member Function Documentation"
.PP 
.SS "template<class EOT, class FitnessEval = typename EOT::Fitness::FitnessEval> void \fBeoIBEAAvgSorting\fP< EOT, FitnessEval >::setBounds (const \fBeoPop\fP< EOT > & _pop)\fC [inline, private, virtual]\fP"
.PP
computation and setting of the bounds for each objective 
.PP
\fBParameters:\fP
.RS 4
\fIconst\fP eoPop<EOT>& _pop the population 
.RE
.PP

.PP
Implements \fBeoIBEA< EOT, FitnessEval >\fP.
.PP
Definition at line 413 of file eoIBEA.h.
.SS "template<class EOT, class FitnessEval = typename EOT::Fitness::FitnessEval> void \fBeoIBEAAvgSorting\fP< EOT, FitnessEval >::fitnesses (const \fBeoPop\fP< EOT > & _pop)\fC [inline, private, virtual]\fP"
.PP
computation and setting of the fitness for each individual of the population 
.PP
\fBParameters:\fP
.RS 4
\fIconst\fP eoPop<EOT>& _pop the population 
.RE
.PP

.PP
Implements \fBeoIBEA< EOT, FitnessEval >\fP.
.PP
Definition at line 445 of file eoIBEA.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for ParadisEO-MOEO from the source code.
