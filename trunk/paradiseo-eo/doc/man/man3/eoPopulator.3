.TH "eoPopulator" 3 "19 Oct 2006" "Version 0.9.4-cvs" "EO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eoPopulator \- eoPopulator is a helper class for general operators \fBeoGenOp\fP It is an \fBeoPop\fP but also behaves like an eoPop::iterator as far as operator* and operator++ are concerned  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <eoPopulator.h>\fP
.PP
Inherited by \fBeoSelectivePopulator< EOT >\fP, and \fBeoSeqPopulator< EOT >\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef unsigned \fBposition_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBeoPopulator\fP (const \fBeoPop\fP< \fBEOT\fP > &_src, \fBeoPop\fP< \fBEOT\fP > &_dest)"
.br
.ti -1c
.RI "virtual \fB~eoPopulator\fP ()"
.br
.RI "\fIVirtual Constructor. \fP"
.ti -1c
.RI "\fBEOT\fP & \fBoperator *\fP (void)"
.br
.RI "\fIa populator behaves like an iterator. \fP"
.ti -1c
.RI "\fBeoPopulator\fP & \fBoperator++\fP ()"
.br
.RI "\fIonly prefix increment defined Does not add a new element when at the end, use operator* for that If not on the end, increment the pointer to the next individual \fP"
.ti -1c
.RI "void \fBinsert\fP (const \fBEOT\fP &_eo)"
.br
.RI "\fImandatory for operators that generate more offspring than parents if such a thing exists ? \fP"
.ti -1c
.RI "void \fBreserve\fP (int how_many)"
.br
.RI "\fIjust to make memory mangement more efficient \fP"
.ti -1c
.RI "const \fBeoPop\fP< \fBEOT\fP > & \fBsource\fP (void)"
.br
.RI "\fIcan be useful for operators with embedded selectors e.g. \fP"
.ti -1c
.RI "\fBeoPop\fP< \fBEOT\fP > & \fBoffspring\fP (void)"
.br
.RI "\fIGet the offspring population. \fP"
.ti -1c
.RI "position_type \fBtellp\fP ()"
.br
.RI "\fIthis is a direct access container: tell position \fP"
.ti -1c
.RI "void \fBseekp\fP (position_type pos)"
.br
.RI "\fIthis is a direct access container: go to position \fP"
.ti -1c
.RI "bool \fBexhausted\fP (void)"
.br
.RI "\fIno more individuals \fP"
.ti -1c
.RI "virtual const \fBEOT\fP & \fBselect\fP ()=0"
.br
.RI "\fIthe pure virtual selection method - will be instanciated in \fBeoSeqPopulator\fP and \fBeoSelectivePopulator\fP \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBeoPop\fP< \fBEOT\fP > & \fBdest\fP"
.br
.ti -1c
.RI "\fBeoPop\fP< \fBEOT\fP >::iterator \fBcurrent\fP"
.br
.ti -1c
.RI "const \fBeoPop\fP< \fBEOT\fP > & \fBsrc\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBget_next\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class EOT> class eoPopulator< EOT >"
eoPopulator is a helper class for general operators \fBeoGenOp\fP It is an \fBeoPop\fP but also behaves like an eoPop::iterator as far as operator* and operator++ are concerned 

See \fBeoGenOp\fP and \fBeoOpContainer\fP 
.PP
Definition at line 39 of file eoPopulator.h.
.SH "Member Function Documentation"
.PP 
.SS "template<class EOT> \fBEOT\fP& \fBeoPopulator\fP< \fBEOT\fP >::operator * (void)\fC [inline]\fP"
.PP
a populator behaves like an iterator. 
.PP
Hence the operator* it returns the current individual -- eventually getting a new one through the operator++ if at the end 
.PP
Definition at line 58 of file eoPopulator.h.
.SS "template<class EOT> const \fBeoPop\fP<\fBEOT\fP>& \fBeoPopulator\fP< \fBEOT\fP >::source (void)\fC [inline]\fP"
.PP
can be useful for operators with embedded selectors e.g. 
.PP
your brain and my beauty -type 
.PP
Definition at line 105 of file eoPopulator.h.
.PP
Referenced by eoSelBinGenOp< EOT >::apply(), and eoEsGlobalXover< EOT >::apply().
.SS "template<class EOT> \fBeoPop\fP<\fBEOT\fP>& \fBeoPopulator\fP< \fBEOT\fP >::offspring (void)\fC [inline]\fP"
.PP
Get the offspring population. 
.PP
Can be useful when you want to do some online niching kind of thing 
.PP
Definition at line 110 of file eoPopulator.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for EO from the source code.
