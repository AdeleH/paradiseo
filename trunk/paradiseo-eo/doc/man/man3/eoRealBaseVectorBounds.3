.TH "eoRealBaseVectorBounds" 3 "19 Oct 2006" "Version 0.9.4-cvs" "EO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eoRealBaseVectorBounds \- Vector type for bounds (see \fBeoRealBounds.h\fP for scalar types) ------------ Class \fBeoRealVectorBounds\fP implements the std::vectorized version: it is basically a std::vector of \fBeoRealBounds\fP * and forwards all request to the elements of the std::vector.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <eoRealVectorBounds.h>\fP
.PP
Inherited by \fBeoRealVectorBounds\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBeoRealBaseVectorBounds\fP ()"
.br
.RI "\fIDefault Ctor. \fP"
.ti -1c
.RI "\fBeoRealBaseVectorBounds\fP (unsigned _dim, \fBeoRealBounds\fP &_bounds)"
.br
.RI "\fICtor: same bounds for everybody, given as an \fBeoRealBounds\fP. \fP"
.ti -1c
.RI "\fBeoRealBaseVectorBounds\fP (\fBeoRealBounds\fP &_xbounds, \fBeoRealBounds\fP &_ybounds)"
.br
.RI "\fICtor, particular case of dim-2. \fP"
.ti -1c
.RI "virtual bool \fBisBounded\fP (unsigned _i)"
.br
.RI "\fItest: is i_th component bounded \fP"
.ti -1c
.RI "virtual bool \fBisBounded\fP (void)"
.br
.RI "\fItest: bounded iff all are bounded \fP"
.ti -1c
.RI "virtual bool \fBhasNoBoundAtAll\fP (unsigned _i)"
.br
.RI "\fISelf-test: true iff i_th component has no bounds at all. \fP"
.ti -1c
.RI "virtual bool \fBhasNoBoundAtAll\fP (void)"
.br
.RI "\fISelf-test: true iff all components have no bound at all. \fP"
.ti -1c
.RI "virtual bool \fBisMinBounded\fP (unsigned _i)"
.br
.ti -1c
.RI "virtual bool \fBisMaxBounded\fP (unsigned _i)"
.br
.ti -1c
.RI "virtual void \fBfoldsInBounds\fP (unsigned _i, double &_r)"
.br
.RI "\fIFolds a real value back into the bounds - i_th component. \fP"
.ti -1c
.RI "virtual void \fBfoldsInBounds\fP (std::vector< double > &_v)"
.br
.RI "\fIFolds all variables of a std::vector of real values into the bounds. \fP"
.ti -1c
.RI "virtual void \fBtruncate\fP (unsigned _i, double &_r)"
.br
.RI "\fITruncates a real value to the bounds - i_th component. \fP"
.ti -1c
.RI "virtual void \fBtruncate\fP (std::vector< double > &_v)"
.br
.RI "\fItruncates all variables of a std::vector of real values to the bounds \fP"
.ti -1c
.RI "virtual bool \fBisInBounds\fP (unsigned _i, double _r)"
.br
.RI "\fItest: is i_th component within the bounds? \fP"
.ti -1c
.RI "virtual bool \fBisInBounds\fP (std::vector< double > _v)"
.br
.RI "\fItest: are ALL components within the bounds? \fP"
.ti -1c
.RI "virtual double \fBminimum\fP (unsigned _i)"
.br
.RI "\fIAccessors: will raise an std::exception if these do not exist. \fP"
.ti -1c
.RI "virtual double \fBmaximum\fP (unsigned _i)"
.br
.ti -1c
.RI "virtual double \fBrange\fP (unsigned _i)"
.br
.ti -1c
.RI "virtual double \fBaverageRange\fP ()"
.br
.RI "\fIComputes the average range An std::exception will be raised if one of the component is unbounded. \fP"
.ti -1c
.RI "virtual double \fBuniform\fP (unsigned _i, \fBeoRng\fP &_rng=eo::rng)"
.br
.RI "\fIGenerates a random number in i_th range An std::exception will be raised if one of the component is unbounded. \fP"
.ti -1c
.RI "void \fBuniform\fP (std::vector< double > &_v, \fBeoRng\fP &_rng=eo::rng)"
.br
.RI "\fIfills a std::vector with uniformly chosen variables in bounds An std::exception will be raised if one of the component is unbounded \fP"
.ti -1c
.RI "virtual void \fBprintOn\fP (std::ostream &_os) const "
.br
.RI "\fIWrite object. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Vector type for bounds (see \fBeoRealBounds.h\fP for scalar types) ------------ Class \fBeoRealVectorBounds\fP implements the std::vectorized version: it is basically a std::vector of \fBeoRealBounds\fP * and forwards all request to the elements of the std::vector. 

This file also contains the global variables and eoDummyVectorNoBounds that are used as defaults in ctors (i.e. when no bounds are given, it is assumed unbounded values)
.PP
THe 2 main classes defined here are
.PP
eoRealBaseVectorBounds, base class that handles all useful functions \fBeoRealVectorBounds\fP which derives from the preceding *and* \fBeoPersistent\fP and also has a mechanism for memory handling of the pointers it has to allocate 
.PP
Definition at line 58 of file eoRealVectorBounds.h.
.SH "Member Function Documentation"
.PP 
.SS "virtual void eoRealBaseVectorBounds::printOn (std::ostream & _os) const\fC [inline, virtual]\fP"
.PP
Write object. 
.PP
It's called printOn since it prints the object on a stream. 
.PP
\fBParameters:\fP
.RS 4
\fI_os\fP A std::ostream. 
.RE
.PP

.PP
Reimplemented in \fBeoRealVectorBounds\fP.
.PP
Definition at line 214 of file eoRealVectorBounds.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for EO from the source code.
